/**
 */
package dk.itu.kben.building.provider;

import dk.itu.kben.building.util.BuildingAdapterFactory;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class BuildingItemProviderAdapterFactory extends BuildingAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public BuildingItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link dk.itu.kben.building.Door} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DoorItemProvider doorItemProvider;

	/**
	 * This creates an adapter for a {@link dk.itu.kben.building.Door}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDoorAdapter() {
		if (doorItemProvider == null) {
			doorItemProvider = new DoorItemProvider(this);
		}

		return doorItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link dk.itu.kben.building.Room} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected RoomItemProvider roomItemProvider;

	/**
	 * This creates an adapter for a {@link dk.itu.kben.building.Room}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createRoomAdapter() {
		if (roomItemProvider == null) {
			roomItemProvider = new RoomItemProvider(this);
		}

		return roomItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link dk.itu.kben.building.Window} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected WindowItemProvider windowItemProvider;

	/**
	 * This creates an adapter for a {@link dk.itu.kben.building.Window}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createWindowAdapter() {
		if (windowItemProvider == null) {
			windowItemProvider = new WindowItemProvider(this);
		}

		return windowItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link dk.itu.kben.building.Construct} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ConstructItemProvider constructItemProvider;

	/**
	 * This creates an adapter for a {@link dk.itu.kben.building.Construct}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createConstructAdapter() {
		if (constructItemProvider == null) {
			constructItemProvider = new ConstructItemProvider(this);
		}

		return constructItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link dk.itu.kben.building.DoorHandle} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DoorHandleItemProvider doorHandleItemProvider;

	/**
	 * This creates an adapter for a {@link dk.itu.kben.building.DoorHandle}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDoorHandleAdapter() {
		if (doorHandleItemProvider == null) {
			doorHandleItemProvider = new DoorHandleItemProvider(this);
		}

		return doorHandleItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link dk.itu.kben.building.Model} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ModelItemProvider modelItemProvider;

	/**
	 * This creates an adapter for a {@link dk.itu.kben.building.Model}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createModelAdapter() {
		if (modelItemProvider == null) {
			modelItemProvider = new ModelItemProvider(this);
		}

		return modelItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link dk.itu.kben.building.AccessControl} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AccessControlItemProvider accessControlItemProvider;

	/**
	 * This creates an adapter for a {@link dk.itu.kben.building.AccessControl}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAccessControlAdapter() {
		if (accessControlItemProvider == null) {
			accessControlItemProvider = new AccessControlItemProvider(this);
		}

		return accessControlItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link dk.itu.kben.building.LightSensor} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected LightSensorItemProvider lightSensorItemProvider;

	/**
	 * This creates an adapter for a {@link dk.itu.kben.building.LightSensor}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createLightSensorAdapter() {
		if (lightSensorItemProvider == null) {
			lightSensorItemProvider = new LightSensorItemProvider(this);
		}

		return lightSensorItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link dk.itu.kben.building.MobilePhone} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MobilePhoneItemProvider mobilePhoneItemProvider;

	/**
	 * This creates an adapter for a {@link dk.itu.kben.building.MobilePhone}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createMobilePhoneAdapter() {
		if (mobilePhoneItemProvider == null) {
			mobilePhoneItemProvider = new MobilePhoneItemProvider(this);
		}

		return mobilePhoneItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link dk.itu.kben.building.Alarm} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AlarmItemProvider alarmItemProvider;

	/**
	 * This creates an adapter for a {@link dk.itu.kben.building.Alarm}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAlarmAdapter() {
		if (alarmItemProvider == null) {
			alarmItemProvider = new AlarmItemProvider(this);
		}

		return alarmItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link dk.itu.kben.building.MotionSensor} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MotionSensorItemProvider motionSensorItemProvider;

	/**
	 * This creates an adapter for a {@link dk.itu.kben.building.MotionSensor}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createMotionSensorAdapter() {
		if (motionSensorItemProvider == null) {
			motionSensorItemProvider = new MotionSensorItemProvider(this);
		}

		return motionSensorItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link dk.itu.kben.building.HumanMotionSensor} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected HumanMotionSensorItemProvider humanMotionSensorItemProvider;

	/**
	 * This creates an adapter for a {@link dk.itu.kben.building.HumanMotionSensor}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createHumanMotionSensorAdapter() {
		if (humanMotionSensorItemProvider == null) {
			humanMotionSensorItemProvider = new HumanMotionSensorItemProvider(this);
		}

		return humanMotionSensorItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link dk.itu.kben.building.Computer} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComputerItemProvider computerItemProvider;

	/**
	 * This creates an adapter for a {@link dk.itu.kben.building.Computer}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createComputerAdapter() {
		if (computerItemProvider == null) {
			computerItemProvider = new ComputerItemProvider(this);
		}

		return computerItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link dk.itu.kben.building.BikeTyreHolder} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected BikeTyreHolderItemProvider bikeTyreHolderItemProvider;

	/**
	 * This creates an adapter for a {@link dk.itu.kben.building.BikeTyreHolder}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createBikeTyreHolderAdapter() {
		if (bikeTyreHolderItemProvider == null) {
			bikeTyreHolderItemProvider = new BikeTyreHolderItemProvider(this);
		}

		return bikeTyreHolderItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link dk.itu.kben.building.PressureSensor} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PressureSensorItemProvider pressureSensorItemProvider;

	/**
	 * This creates an adapter for a {@link dk.itu.kben.building.PressureSensor}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPressureSensorAdapter() {
		if (pressureSensorItemProvider == null) {
			pressureSensorItemProvider = new PressureSensorItemProvider(this);
		}

		return pressureSensorItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link dk.itu.kben.building.PetBottle} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PetBottleItemProvider petBottleItemProvider;

	/**
	 * This creates an adapter for a {@link dk.itu.kben.building.PetBottle}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPetBottleAdapter() {
		if (petBottleItemProvider == null) {
			petBottleItemProvider = new PetBottleItemProvider(this);
		}

		return petBottleItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link dk.itu.kben.building.CoffeeMachine} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CoffeeMachineItemProvider coffeeMachineItemProvider;

	/**
	 * This creates an adapter for a {@link dk.itu.kben.building.CoffeeMachine}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCoffeeMachineAdapter() {
		if (coffeeMachineItemProvider == null) {
			coffeeMachineItemProvider = new CoffeeMachineItemProvider(this);
		}

		return coffeeMachineItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link dk.itu.kben.building.Calendar} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CalendarItemProvider calendarItemProvider;

	/**
	 * This creates an adapter for a {@link dk.itu.kben.building.Calendar}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCalendarAdapter() {
		if (calendarItemProvider == null) {
			calendarItemProvider = new CalendarItemProvider(this);
		}

		return calendarItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link dk.itu.kben.building.KitchenTable} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected KitchenTableItemProvider kitchenTableItemProvider;

	/**
	 * This creates an adapter for a {@link dk.itu.kben.building.KitchenTable}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createKitchenTableAdapter() {
		if (kitchenTableItemProvider == null) {
			kitchenTableItemProvider = new KitchenTableItemProvider(this);
		}

		return kitchenTableItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link dk.itu.kben.building.Lamp} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected LampItemProvider lampItemProvider;

	/**
	 * This creates an adapter for a {@link dk.itu.kben.building.Lamp}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createLampAdapter() {
		if (lampItemProvider == null) {
			lampItemProvider = new LampItemProvider(this);
		}

		return lampItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link dk.itu.kben.building.MeetingSchedule} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MeetingScheduleItemProvider meetingScheduleItemProvider;

	/**
	 * This creates an adapter for a {@link dk.itu.kben.building.MeetingSchedule}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createMeetingScheduleAdapter() {
		if (meetingScheduleItemProvider == null) {
			meetingScheduleItemProvider = new MeetingScheduleItemProvider(this);
		}

		return meetingScheduleItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link dk.itu.kben.building.DishWasher} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DishWasherItemProvider dishWasherItemProvider;

	/**
	 * This creates an adapter for a {@link dk.itu.kben.building.DishWasher}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDishWasherAdapter() {
		if (dishWasherItemProvider == null) {
			dishWasherItemProvider = new DishWasherItemProvider(this);
		}

		return dishWasherItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link dk.itu.kben.building.Printer} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PrinterItemProvider printerItemProvider;

	/**
	 * This creates an adapter for a {@link dk.itu.kben.building.Printer}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPrinterAdapter() {
		if (printerItemProvider == null) {
			printerItemProvider = new PrinterItemProvider(this);
		}

		return printerItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link dk.itu.kben.building.Radio} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected RadioItemProvider radioItemProvider;

	/**
	 * This creates an adapter for a {@link dk.itu.kben.building.Radio}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createRadioAdapter() {
		if (radioItemProvider == null) {
			radioItemProvider = new RadioItemProvider(this);
		}

		return radioItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link dk.itu.kben.building.ToiletSeat} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ToiletSeatItemProvider toiletSeatItemProvider;

	/**
	 * This creates an adapter for a {@link dk.itu.kben.building.ToiletSeat}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createToiletSeatAdapter() {
		if (toiletSeatItemProvider == null) {
			toiletSeatItemProvider = new ToiletSeatItemProvider(this);
		}

		return toiletSeatItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link dk.itu.kben.building.SMS} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SMSItemProvider smsItemProvider;

	/**
	 * This creates an adapter for a {@link dk.itu.kben.building.SMS}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSMSAdapter() {
		if (smsItemProvider == null) {
			smsItemProvider = new SMSItemProvider(this);
		}

		return smsItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link dk.itu.kben.building.Blinds} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected BlindsItemProvider blindsItemProvider;

	/**
	 * This creates an adapter for a {@link dk.itu.kben.building.Blinds}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createBlindsAdapter() {
		if (blindsItemProvider == null) {
			blindsItemProvider = new BlindsItemProvider(this);
		}

		return blindsItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link dk.itu.kben.building.Phone} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PhoneItemProvider phoneItemProvider;

	/**
	 * This creates an adapter for a {@link dk.itu.kben.building.Phone}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPhoneAdapter() {
		if (phoneItemProvider == null) {
			phoneItemProvider = new PhoneItemProvider(this);
		}

		return phoneItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link dk.itu.kben.building.TemperatureSensor} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TemperatureSensorItemProvider temperatureSensorItemProvider;

	/**
	 * This creates an adapter for a {@link dk.itu.kben.building.TemperatureSensor}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTemperatureSensorAdapter() {
		if (temperatureSensorItemProvider == null) {
			temperatureSensorItemProvider = new TemperatureSensorItemProvider(this);
		}

		return temperatureSensorItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link dk.itu.kben.building.Heater} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected HeaterItemProvider heaterItemProvider;

	/**
	 * This creates an adapter for a {@link dk.itu.kben.building.Heater}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createHeaterAdapter() {
		if (heaterItemProvider == null) {
			heaterItemProvider = new HeaterItemProvider(this);
		}

		return heaterItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void dispose() {
		if (doorItemProvider != null) doorItemProvider.dispose();
		if (roomItemProvider != null) roomItemProvider.dispose();
		if (windowItemProvider != null) windowItemProvider.dispose();
		if (constructItemProvider != null) constructItemProvider.dispose();
		if (doorHandleItemProvider != null) doorHandleItemProvider.dispose();
		if (modelItemProvider != null) modelItemProvider.dispose();
		if (accessControlItemProvider != null) accessControlItemProvider.dispose();
		if (lightSensorItemProvider != null) lightSensorItemProvider.dispose();
		if (mobilePhoneItemProvider != null) mobilePhoneItemProvider.dispose();
		if (alarmItemProvider != null) alarmItemProvider.dispose();
		if (motionSensorItemProvider != null) motionSensorItemProvider.dispose();
		if (humanMotionSensorItemProvider != null) humanMotionSensorItemProvider.dispose();
		if (computerItemProvider != null) computerItemProvider.dispose();
		if (bikeTyreHolderItemProvider != null) bikeTyreHolderItemProvider.dispose();
		if (pressureSensorItemProvider != null) pressureSensorItemProvider.dispose();
		if (petBottleItemProvider != null) petBottleItemProvider.dispose();
		if (coffeeMachineItemProvider != null) coffeeMachineItemProvider.dispose();
		if (calendarItemProvider != null) calendarItemProvider.dispose();
		if (kitchenTableItemProvider != null) kitchenTableItemProvider.dispose();
		if (lampItemProvider != null) lampItemProvider.dispose();
		if (meetingScheduleItemProvider != null) meetingScheduleItemProvider.dispose();
		if (dishWasherItemProvider != null) dishWasherItemProvider.dispose();
		if (printerItemProvider != null) printerItemProvider.dispose();
		if (radioItemProvider != null) radioItemProvider.dispose();
		if (toiletSeatItemProvider != null) toiletSeatItemProvider.dispose();
		if (smsItemProvider != null) smsItemProvider.dispose();
		if (blindsItemProvider != null) blindsItemProvider.dispose();
		if (phoneItemProvider != null) phoneItemProvider.dispose();
		if (temperatureSensorItemProvider != null) temperatureSensorItemProvider.dispose();
		if (heaterItemProvider != null) heaterItemProvider.dispose();
	}

}
