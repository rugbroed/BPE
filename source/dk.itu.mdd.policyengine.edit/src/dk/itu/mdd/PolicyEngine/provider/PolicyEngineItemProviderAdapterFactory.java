/**
 */
package dk.itu.mdd.PolicyEngine.provider;

import dk.itu.mdd.PolicyEngine.util.PolicyEngineAdapterFactory;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class PolicyEngineItemProviderAdapterFactory extends PolicyEngineAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public PolicyEngineItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link dk.itu.mdd.PolicyEngine.Building} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected BuildingItemProvider buildingItemProvider;

	/**
	 * This creates an adapter for a {@link dk.itu.mdd.PolicyEngine.Building}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createBuildingAdapter() {
		if (buildingItemProvider == null) {
			buildingItemProvider = new BuildingItemProvider(this);
		}

		return buildingItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link dk.itu.mdd.PolicyEngine.Model} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ModelItemProvider modelItemProvider;

	/**
	 * This creates an adapter for a {@link dk.itu.mdd.PolicyEngine.Model}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createModelAdapter() {
		if (modelItemProvider == null) {
			modelItemProvider = new ModelItemProvider(this);
		}

		return modelItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link dk.itu.mdd.PolicyEngine.LightSwitchActuator} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected LightSwitchActuatorItemProvider lightSwitchActuatorItemProvider;

	/**
	 * This creates an adapter for a {@link dk.itu.mdd.PolicyEngine.LightSwitchActuator}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createLightSwitchActuatorAdapter() {
		if (lightSwitchActuatorItemProvider == null) {
			lightSwitchActuatorItemProvider = new LightSwitchActuatorItemProvider(this);
		}

		return lightSwitchActuatorItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link dk.itu.mdd.PolicyEngine.SensorComponent} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SensorComponentItemProvider sensorComponentItemProvider;

	/**
	 * This creates an adapter for a {@link dk.itu.mdd.PolicyEngine.SensorComponent}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSensorComponentAdapter() {
		if (sensorComponentItemProvider == null) {
			sensorComponentItemProvider = new SensorComponentItemProvider(this);
		}

		return sensorComponentItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link dk.itu.mdd.PolicyEngine.MotionSensor} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MotionSensorItemProvider motionSensorItemProvider;

	/**
	 * This creates an adapter for a {@link dk.itu.mdd.PolicyEngine.MotionSensor}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createMotionSensorAdapter() {
		if (motionSensorItemProvider == null) {
			motionSensorItemProvider = new MotionSensorItemProvider(this);
		}

		return motionSensorItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link dk.itu.mdd.PolicyEngine.TemperatureSensor} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TemperatureSensorItemProvider temperatureSensorItemProvider;

	/**
	 * This creates an adapter for a {@link dk.itu.mdd.PolicyEngine.TemperatureSensor}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTemperatureSensorAdapter() {
		if (temperatureSensorItemProvider == null) {
			temperatureSensorItemProvider = new TemperatureSensorItemProvider(this);
		}

		return temperatureSensorItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link dk.itu.mdd.PolicyEngine.PressureSensor} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PressureSensorItemProvider pressureSensorItemProvider;

	/**
	 * This creates an adapter for a {@link dk.itu.mdd.PolicyEngine.PressureSensor}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPressureSensorAdapter() {
		if (pressureSensorItemProvider == null) {
			pressureSensorItemProvider = new PressureSensorItemProvider(this);
		}

		return pressureSensorItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link dk.itu.mdd.PolicyEngine.TouchSensor} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TouchSensorItemProvider touchSensorItemProvider;

	/**
	 * This creates an adapter for a {@link dk.itu.mdd.PolicyEngine.TouchSensor}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTouchSensorAdapter() {
		if (touchSensorItemProvider == null) {
			touchSensorItemProvider = new TouchSensorItemProvider(this);
		}

		return touchSensorItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link dk.itu.mdd.PolicyEngine.WindowActuator} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected WindowActuatorItemProvider windowActuatorItemProvider;

	/**
	 * This creates an adapter for a {@link dk.itu.mdd.PolicyEngine.WindowActuator}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createWindowActuatorAdapter() {
		if (windowActuatorItemProvider == null) {
			windowActuatorItemProvider = new WindowActuatorItemProvider(this);
		}

		return windowActuatorItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link dk.itu.mdd.PolicyEngine.HumidifierActuator} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected HumidifierActuatorItemProvider humidifierActuatorItemProvider;

	/**
	 * This creates an adapter for a {@link dk.itu.mdd.PolicyEngine.HumidifierActuator}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createHumidifierActuatorAdapter() {
		if (humidifierActuatorItemProvider == null) {
			humidifierActuatorItemProvider = new HumidifierActuatorItemProvider(this);
		}

		return humidifierActuatorItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link dk.itu.mdd.PolicyEngine.LightSensor} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected LightSensorItemProvider lightSensorItemProvider;

	/**
	 * This creates an adapter for a {@link dk.itu.mdd.PolicyEngine.LightSensor}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createLightSensorAdapter() {
		if (lightSensorItemProvider == null) {
			lightSensorItemProvider = new LightSensorItemProvider(this);
		}

		return lightSensorItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link dk.itu.mdd.PolicyEngine.CTS} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CTSItemProvider ctsItemProvider;

	/**
	 * This creates an adapter for a {@link dk.itu.mdd.PolicyEngine.CTS}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCTSAdapter() {
		if (ctsItemProvider == null) {
			ctsItemProvider = new CTSItemProvider(this);
		}

		return ctsItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link dk.itu.mdd.PolicyEngine.AccessControl} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AccessControlItemProvider accessControlItemProvider;

	/**
	 * This creates an adapter for a {@link dk.itu.mdd.PolicyEngine.AccessControl}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAccessControlAdapter() {
		if (accessControlItemProvider == null) {
			accessControlItemProvider = new AccessControlItemProvider(this);
		}

		return accessControlItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link dk.itu.mdd.PolicyEngine.DoorActuator} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DoorActuatorItemProvider doorActuatorItemProvider;

	/**
	 * This creates an adapter for a {@link dk.itu.mdd.PolicyEngine.DoorActuator}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDoorActuatorAdapter() {
		if (doorActuatorItemProvider == null) {
			doorActuatorItemProvider = new DoorActuatorItemProvider(this);
		}

		return doorActuatorItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link dk.itu.mdd.PolicyEngine.CalendarSystem} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CalendarSystemItemProvider calendarSystemItemProvider;

	/**
	 * This creates an adapter for a {@link dk.itu.mdd.PolicyEngine.CalendarSystem}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCalendarSystemAdapter() {
		if (calendarSystemItemProvider == null) {
			calendarSystemItemProvider = new CalendarSystemItemProvider(this);
		}

		return calendarSystemItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link dk.itu.mdd.PolicyEngine.MeetingScheduleSystem} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MeetingScheduleSystemItemProvider meetingScheduleSystemItemProvider;

	/**
	 * This creates an adapter for a {@link dk.itu.mdd.PolicyEngine.MeetingScheduleSystem}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createMeetingScheduleSystemAdapter() {
		if (meetingScheduleSystemItemProvider == null) {
			meetingScheduleSystemItemProvider = new MeetingScheduleSystemItemProvider(this);
		}

		return meetingScheduleSystemItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link dk.itu.mdd.PolicyEngine.RadiatorActuator} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected RadiatorActuatorItemProvider radiatorActuatorItemProvider;

	/**
	 * This creates an adapter for a {@link dk.itu.mdd.PolicyEngine.RadiatorActuator}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createRadiatorActuatorAdapter() {
		if (radiatorActuatorItemProvider == null) {
			radiatorActuatorItemProvider = new RadiatorActuatorItemProvider(this);
		}

		return radiatorActuatorItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link dk.itu.mdd.PolicyEngine.SmokeSensor} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SmokeSensorItemProvider smokeSensorItemProvider;

	/**
	 * This creates an adapter for a {@link dk.itu.mdd.PolicyEngine.SmokeSensor}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSmokeSensorAdapter() {
		if (smokeSensorItemProvider == null) {
			smokeSensorItemProvider = new SmokeSensorItemProvider(this);
		}

		return smokeSensorItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link dk.itu.mdd.PolicyEngine.HasSensors} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected HasSensorsItemProvider hasSensorsItemProvider;

	/**
	 * This creates an adapter for a {@link dk.itu.mdd.PolicyEngine.HasSensors}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createHasSensorsAdapter() {
		if (hasSensorsItemProvider == null) {
			hasSensorsItemProvider = new HasSensorsItemProvider(this);
		}

		return hasSensorsItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link dk.itu.mdd.PolicyEngine.HasActuators} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected HasActuatorsItemProvider hasActuatorsItemProvider;

	/**
	 * This creates an adapter for a {@link dk.itu.mdd.PolicyEngine.HasActuators}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createHasActuatorsAdapter() {
		if (hasActuatorsItemProvider == null) {
			hasActuatorsItemProvider = new HasActuatorsItemProvider(this);
		}

		return hasActuatorsItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link dk.itu.mdd.PolicyEngine.CO2Sensor} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CO2SensorItemProvider co2SensorItemProvider;

	/**
	 * This creates an adapter for a {@link dk.itu.mdd.PolicyEngine.CO2Sensor}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCO2SensorAdapter() {
		if (co2SensorItemProvider == null) {
			co2SensorItemProvider = new CO2SensorItemProvider(this);
		}

		return co2SensorItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link dk.itu.mdd.PolicyEngine.InfraredLightSensor} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected InfraredLightSensorItemProvider infraredLightSensorItemProvider;

	/**
	 * This creates an adapter for a {@link dk.itu.mdd.PolicyEngine.InfraredLightSensor}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createInfraredLightSensorAdapter() {
		if (infraredLightSensorItemProvider == null) {
			infraredLightSensorItemProvider = new InfraredLightSensorItemProvider(this);
		}

		return infraredLightSensorItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link dk.itu.mdd.PolicyEngine.HumiditySensor} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected HumiditySensorItemProvider humiditySensorItemProvider;

	/**
	 * This creates an adapter for a {@link dk.itu.mdd.PolicyEngine.HumiditySensor}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createHumiditySensorAdapter() {
		if (humiditySensorItemProvider == null) {
			humiditySensorItemProvider = new HumiditySensorItemProvider(this);
		}

		return humiditySensorItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link dk.itu.mdd.PolicyEngine.AudioAlarmActuator} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AudioAlarmActuatorItemProvider audioAlarmActuatorItemProvider;

	/**
	 * This creates an adapter for a {@link dk.itu.mdd.PolicyEngine.AudioAlarmActuator}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAudioAlarmActuatorAdapter() {
		if (audioAlarmActuatorItemProvider == null) {
			audioAlarmActuatorItemProvider = new AudioAlarmActuatorItemProvider(this);
		}

		return audioAlarmActuatorItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link dk.itu.mdd.PolicyEngine.HasIntegerValue} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected HasIntegerValueItemProvider hasIntegerValueItemProvider;

	/**
	 * This creates an adapter for a {@link dk.itu.mdd.PolicyEngine.HasIntegerValue}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createHasIntegerValueAdapter() {
		if (hasIntegerValueItemProvider == null) {
			hasIntegerValueItemProvider = new HasIntegerValueItemProvider(this);
		}

		return hasIntegerValueItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link dk.itu.mdd.PolicyEngine.Room} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected RoomItemProvider roomItemProvider;

	/**
	 * This creates an adapter for a {@link dk.itu.mdd.PolicyEngine.Room}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createRoomAdapter() {
		if (roomItemProvider == null) {
			roomItemProvider = new RoomItemProvider(this);
		}

		return roomItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link dk.itu.mdd.PolicyEngine.Floor} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected FloorItemProvider floorItemProvider;

	/**
	 * This creates an adapter for a {@link dk.itu.mdd.PolicyEngine.Floor}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createFloorAdapter() {
		if (floorItemProvider == null) {
			floorItemProvider = new FloorItemProvider(this);
		}

		return floorItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link dk.itu.mdd.PolicyEngine.ActuatorComponent} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ActuatorComponentItemProvider actuatorComponentItemProvider;

	/**
	 * This creates an adapter for a {@link dk.itu.mdd.PolicyEngine.ActuatorComponent}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createActuatorComponentAdapter() {
		if (actuatorComponentItemProvider == null) {
			actuatorComponentItemProvider = new ActuatorComponentItemProvider(this);
		}

		return actuatorComponentItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link dk.itu.mdd.PolicyEngine.Policy} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PolicyItemProvider policyItemProvider;

	/**
	 * This creates an adapter for a {@link dk.itu.mdd.PolicyEngine.Policy}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPolicyAdapter() {
		if (policyItemProvider == null) {
			policyItemProvider = new PolicyItemProvider(this);
		}

		return policyItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link dk.itu.mdd.PolicyEngine.State} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected StateItemProvider stateItemProvider;

	/**
	 * This creates an adapter for a {@link dk.itu.mdd.PolicyEngine.State}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createStateAdapter() {
		if (stateItemProvider == null) {
			stateItemProvider = new StateItemProvider(this);
		}

		return stateItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link dk.itu.mdd.PolicyEngine.Timer} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TimerItemProvider timerItemProvider;

	/**
	 * This creates an adapter for a {@link dk.itu.mdd.PolicyEngine.Timer}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTimerAdapter() {
		if (timerItemProvider == null) {
			timerItemProvider = new TimerItemProvider(this);
		}

		return timerItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link dk.itu.mdd.PolicyEngine.Schedule} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ScheduleItemProvider scheduleItemProvider;

	/**
	 * This creates an adapter for a {@link dk.itu.mdd.PolicyEngine.Schedule}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createScheduleAdapter() {
		if (scheduleItemProvider == null) {
			scheduleItemProvider = new ScheduleItemProvider(this);
		}

		return scheduleItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link dk.itu.mdd.PolicyEngine.Time} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TimeItemProvider timeItemProvider;

	/**
	 * This creates an adapter for a {@link dk.itu.mdd.PolicyEngine.Time}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTimeAdapter() {
		if (timeItemProvider == null) {
			timeItemProvider = new TimeItemProvider(this);
		}

		return timeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link dk.itu.mdd.PolicyEngine.If} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IfItemProvider ifItemProvider;

	/**
	 * This creates an adapter for a {@link dk.itu.mdd.PolicyEngine.If}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createIfAdapter() {
		if (ifItemProvider == null) {
			ifItemProvider = new IfItemProvider(this);
		}

		return ifItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link dk.itu.mdd.PolicyEngine.TimeExpression} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TimeExpressionItemProvider timeExpressionItemProvider;

	/**
	 * This creates an adapter for a {@link dk.itu.mdd.PolicyEngine.TimeExpression}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTimeExpressionAdapter() {
		if (timeExpressionItemProvider == null) {
			timeExpressionItemProvider = new TimeExpressionItemProvider(this);
		}

		return timeExpressionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link dk.itu.mdd.PolicyEngine.ResetExpression} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ResetExpressionItemProvider resetExpressionItemProvider;

	/**
	 * This creates an adapter for a {@link dk.itu.mdd.PolicyEngine.ResetExpression}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createResetExpressionAdapter() {
		if (resetExpressionItemProvider == null) {
			resetExpressionItemProvider = new ResetExpressionItemProvider(this);
		}

		return resetExpressionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link dk.itu.mdd.PolicyEngine.RoomUsage} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected RoomUsageItemProvider roomUsageItemProvider;

	/**
	 * This creates an adapter for a {@link dk.itu.mdd.PolicyEngine.RoomUsage}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createRoomUsageAdapter() {
		if (roomUsageItemProvider == null) {
			roomUsageItemProvider = new RoomUsageItemProvider(this);
		}

		return roomUsageItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link dk.itu.mdd.PolicyEngine.ManyExpressions} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ManyExpressionsItemProvider manyExpressionsItemProvider;

	/**
	 * This creates an adapter for a {@link dk.itu.mdd.PolicyEngine.ManyExpressions}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createManyExpressionsAdapter() {
		if (manyExpressionsItemProvider == null) {
			manyExpressionsItemProvider = new ManyExpressionsItemProvider(this);
		}

		return manyExpressionsItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link dk.itu.mdd.PolicyEngine.CompExpression} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CompExpressionItemProvider compExpressionItemProvider;

	/**
	 * This creates an adapter for a {@link dk.itu.mdd.PolicyEngine.CompExpression}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCompExpressionAdapter() {
		if (compExpressionItemProvider == null) {
			compExpressionItemProvider = new CompExpressionItemProvider(this);
		}

		return compExpressionItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void dispose() {
		if (buildingItemProvider != null) buildingItemProvider.dispose();
		if (modelItemProvider != null) modelItemProvider.dispose();
		if (lightSwitchActuatorItemProvider != null) lightSwitchActuatorItemProvider.dispose();
		if (sensorComponentItemProvider != null) sensorComponentItemProvider.dispose();
		if (motionSensorItemProvider != null) motionSensorItemProvider.dispose();
		if (temperatureSensorItemProvider != null) temperatureSensorItemProvider.dispose();
		if (pressureSensorItemProvider != null) pressureSensorItemProvider.dispose();
		if (touchSensorItemProvider != null) touchSensorItemProvider.dispose();
		if (windowActuatorItemProvider != null) windowActuatorItemProvider.dispose();
		if (humidifierActuatorItemProvider != null) humidifierActuatorItemProvider.dispose();
		if (lightSensorItemProvider != null) lightSensorItemProvider.dispose();
		if (ctsItemProvider != null) ctsItemProvider.dispose();
		if (accessControlItemProvider != null) accessControlItemProvider.dispose();
		if (doorActuatorItemProvider != null) doorActuatorItemProvider.dispose();
		if (calendarSystemItemProvider != null) calendarSystemItemProvider.dispose();
		if (meetingScheduleSystemItemProvider != null) meetingScheduleSystemItemProvider.dispose();
		if (radiatorActuatorItemProvider != null) radiatorActuatorItemProvider.dispose();
		if (smokeSensorItemProvider != null) smokeSensorItemProvider.dispose();
		if (hasSensorsItemProvider != null) hasSensorsItemProvider.dispose();
		if (hasActuatorsItemProvider != null) hasActuatorsItemProvider.dispose();
		if (co2SensorItemProvider != null) co2SensorItemProvider.dispose();
		if (infraredLightSensorItemProvider != null) infraredLightSensorItemProvider.dispose();
		if (humiditySensorItemProvider != null) humiditySensorItemProvider.dispose();
		if (audioAlarmActuatorItemProvider != null) audioAlarmActuatorItemProvider.dispose();
		if (hasIntegerValueItemProvider != null) hasIntegerValueItemProvider.dispose();
		if (roomItemProvider != null) roomItemProvider.dispose();
		if (floorItemProvider != null) floorItemProvider.dispose();
		if (actuatorComponentItemProvider != null) actuatorComponentItemProvider.dispose();
		if (policyItemProvider != null) policyItemProvider.dispose();
		if (stateItemProvider != null) stateItemProvider.dispose();
		if (timerItemProvider != null) timerItemProvider.dispose();
		if (scheduleItemProvider != null) scheduleItemProvider.dispose();
		if (timeItemProvider != null) timeItemProvider.dispose();
		if (ifItemProvider != null) ifItemProvider.dispose();
		if (timeExpressionItemProvider != null) timeExpressionItemProvider.dispose();
		if (resetExpressionItemProvider != null) resetExpressionItemProvider.dispose();
		if (roomUsageItemProvider != null) roomUsageItemProvider.dispose();
		if (manyExpressionsItemProvider != null) manyExpressionsItemProvider.dispose();
		if (compExpressionItemProvider != null) compExpressionItemProvider.dispose();
	}

}
