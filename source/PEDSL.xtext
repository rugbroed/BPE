// automatically generated by Xtext
grammar org.xtext.example.mydsl.MyDsl with org.eclipse.xtext.common.Terminals

import "platform:/resource/dk.itu.mdd.policyengine/model/PolicyEngine.ecore" 
import "http://www.eclipse.org/emf/2002/Ecore" as ecore
// automatically generated by Xtext

Model returns Model:
	{Model}
	name=EString
	'{'
		(stateDefinition+=State (stateDefinition+=State)*)?
		(timers+=Timer (timers+=Timer)*)?
		(policyDefinition+=Policy (policyDefinition+=Policy)*)?
		(schedules+=Schedule (schedules+=Schedule)*)?
		('room-type' predefinedRooms+=Room)*
		(buildings+=Building (buildings+=Building)*)?
	'}';

State returns State:
	{State}
	'state' name=EString valueState?= '=' EBoolean
	;

Schedule returns Schedule:
	{Schedule}
	'schedule'
	name=EString
		('days' weekdays+=Weekdays ( "," weekdays+=Weekdays)*)?
		('from' from=Time 'to' to=Time)?
	;

Policy returns Policy:
	{Policy}
	'policy'
	name=EString
	('uses sensors' (usesSensors+=Sensor (',' usesSensors+=Sensor)*)?)?
	('uses actuators' (usesActuators+=Actuator (',' usesActuators+=Actuator)*)?)?
	'specifiedBy' '{' ('State' defineState+=[State|EString] '=' EBoolean )*
	(controlledBy+=Timer ( controlledBy+=Timer)*)?
	specifiedBy+=If ( specifiedBy+=If)* '}' 
	;


Building returns Building:
	{Building}
	'building'
	name=EString
	'{'
		(ctsSystem=CTS)?
		(accessControl=AccessControl)?
		(calendarSystem=CalendarSystem)?
		(meetingScheduleSystem=MeetingScheduleSystem)?
		(floors+=Floor (floors+=Floor)*)?
		(timers+=Timer (timers+=Timer)*)?
	'}';
	
Floor returns Floor:
	{Floor}
	'floor'
	name=EString
	'{'
		('room' rooms+=Room (rooms+=Room)*)?
		//('timers' timers+=Timer (timers+=Timer)*)?
	'}';

Room returns Room:
	{Room}
	name=EString
	('is-of-type' extends+=[Room|EString] (',' extends+=[Room|EString])*)?
	
	('is-controlled-by' policies+=[Policy|EString] (',' policies+=[Policy|EString])*
		('during' during+=[Schedule|EString] (',' during+=[Schedule|EString])*
		|
		'during-always')
	)?
	'{' 
		(timers+=Timer (timers+=Timer)*)?
		(declareSensor+=SensorComponent (declareSensor+=SensorComponent)*)?
		(declareActuator+=ActuatorComponent (declareActuator+=ActuatorComponent)*)?
	'}'
	;

Actuator returns Actuator:
	LightSwitchActuator | WindowActuator | HumidifierActuator | DoorActuator | RadiatorActuator | AudioAlarmActuator;

Sensor returns Sensor:
	MotionSensor | TemperatureSensor | PressureSensor | TouchSensor | LightSensor | SmokeSensor | CO2Sensor | InfraredLightSensor | HumiditySensor;

Expression returns Expression:
	Conjunction ( {ManyExpressions.leftExpr=current} operator='||' rightExpr=Conjunction )* ;

Conjunction returns Expression: 
	Primary ( {ManyExpressions.leftExpr=current} operator='&&' rightExpr=Primary )* ;

Primary	returns Expression: 
	TimeExpression | ResetExpression | CompExpression | '(' Expression ')';
	
Timer returns Timer:
	{Timer}
	'timer'
	name=EString;

CTS returns CTS:
	{CTS}
	'CTS'
	'{'
		('temperatureSensors' '{' temperatureSensors+=Sensor ( "," temperatureSensors+=Sensor)* '}' )?
		('ctsActuators' '{' ctsActuators+=Actuator ( "," ctsActuators+=Actuator)* '}' )?
	'}';

AccessControl returns AccessControl:
	{AccessControl}
	'AccessControl'
	'{'
		('accessControlSensors' '{' accessControlSensors+=Sensor ( "," accessControlSensors+=Sensor)* '}' )?
		('accessControlDoorLockActuator' '{' accessControlDoorLockActuator+=Actuator ( "," accessControlDoorLockActuator+=Actuator)* '}' )?
	'}';

CalendarSystem returns CalendarSystem:
	{CalendarSystem}
	'CalendarSystem'
	;

MeetingScheduleSystem returns MeetingScheduleSystem:
	{MeetingScheduleSystem}
	'MeetingScheduleSystem'
	;

MotionSensor returns MotionSensor:
	{MotionSensor}
	'MotionSensor'
		('valueState' valueState=EInt)?	;

TemperatureSensor returns TemperatureSensor:
	{TemperatureSensor}
	'TemperatureSensor'
		('valueState' valueState=EInt)? ;

PressureSensor returns PressureSensor:
	{PressureSensor}
	'PressureSensor'
		('valueState' valueState=EInt)? ;

TouchSensor returns TouchSensor:
	{TouchSensor}
	'TouchSensor'
		('valueState' valueState=EInt)? ;

LightSensor returns LightSensor:
	{LightSensor}
	'LightSensor'
		('valueState' valueState=EInt)? ;

SmokeSensor returns SmokeSensor:
	{SmokeSensor}
	'SmokeSensor'
		('valueState' valueState=EInt)? ;

CO2Sensor returns CO2Sensor:
	{CO2Sensor}
	'CO2Sensor'
		('valueState' valueState=EInt)? ;

InfraredLightSensor returns InfraredLightSensor:
	{InfraredLightSensor}
	'InfraredLightSensor'
		('valueState' valueState=EInt)? ;

HumiditySensor returns HumiditySensor:
	{HumiditySensor}
	'HumiditySensor'
		('valueState' valueState=EInt)? ;

LightSwitchActuator returns LightSwitchActuator:
	{LightSwitchActuator}
	'LightSwitchActuator'
		('valueState' valueState=EInt)? ;

WindowActuator returns WindowActuator:
	{WindowActuator}
	'WindowActuator'
		('valueState' valueState=EInt)? ;

HumidifierActuator returns HumidifierActuator:
	{HumidifierActuator}
	'HumidifierActuator'
		('valueState' valueState=EInt)? ;

DoorActuator returns DoorActuator:
	{DoorActuator}
	'DoorActuator'
		('valueState' valueState=EInt)? ;

RadiatorActuator returns RadiatorActuator:
	{RadiatorActuator}
	'RadiatorActuator'
		('valueState' valueState=EInt)? ;

AudioAlarmActuator returns AudioAlarmActuator:
	{AudioAlarmActuator}
	'AudioAlarmActuator'
		('valueState' valueState=EInt)? ;

SensorComponent returns SensorComponent:
	{SensorComponent}
	'sensor '
	name=EString
		('is a ' sensors+=Sensor (sensors+=Sensor)*)?
	;

ActuatorComponent returns ActuatorComponent:
	{ActuatorComponent}
	'actuator'
	name=EString
		('is a ' actuators+=Actuator (actuators+=Actuator)*)?
	;

If returns If:
	'if'
		'(' cond=Expression ')'
		'{' (elseif+=If ( elseif+=If)* )? (then+=Expression ( then+=Expression)*)? '}'
		('else' '{' (elseif+=If ( elseif+=If)* )? (else=Expression)? '}')?
	;


TimeExpression returns TimeExpression:
	time=[Timer|EString] 'reaches' seconds=EInt 'seconds' ;

ResetExpression returns ResetExpression:
	'reset'  reset=[Timer|EString] ;

RoomUsage returns RoomUsage:
	{RoomUsage}
	(definedRooms=[Room|EString] '.')? sen=Sensor | act=Actuator ;

ManyExpressions returns ManyExpressions:
	'ManyExpressions'
	'{'
		'operator' operator=EString
		'leftExpr' leftExpr=Expression
		'rightExpr' rightExpr=Expression
	'}';

CompExpression returns CompExpression:
	expr=RoomUsage	operand=CompOps  Value=EInt;

Time returns Time:
	{Time}
		(hours=EShort ':' minutes=EShort)?
	;

enum CompOps:
	GREATER = '>' | GREATEROREQUAL = '>=' | EQUAL = '=' | LESSOREQUAL = '<=' | LESS = '<' | NOTEQUAL = '!=' ;

enum Weekdays:
	MONDAY = 'Monday' | TUESDAY = 'Tuesday' | WEDNESDAY = 'Wednesday' | THURSDAY = 'Thursday' | FRIDAY = 'Friday' | SATURDAY = 'Saturday' | SUNDAY = 'Sunday'
	;

EInt returns ecore::EInt:
	'-'? INT;

EShort returns ecore::EShort:
	'-'? INT;
	
EBoolean returns ecore::EBoolean:
	'true' | 'false';
	
EString returns ecore::EString:
	STRING | ID;