// automatically generated by Xtext
grammar org.xtext.example.mydsl.MyDsl with org.eclipse.xtext.common.Terminals

import "platform:/resource/bpe/model/PolicyEngine.ecore" 
import "http://www.eclipse.org/emf/2002/Ecore" as ecore

Model returns Model:
	{Model}
	'model'
	name=EString
	'{'
		('actuators' actuators=[Actuator|EString])?
		('sensors' sensors=[Sensor|EString])?
		(defineComponents+=ModelDefinedComponents (defineComponents+=ModelDefinedComponents)*)?
		(buildings+=Building (buildings+=Building)*)?
	'}';

Actuator returns Actuator:
	LightSwitchActuator | WindowActuator | HumidifierActuator | DoorActuator | SMSActuator | RadiatorActuator | DatabaseActuator | AudioAlarmActuator | SetsOpenCloseState_Impl | SetsOnOffState_Impl | SetStringState_Impl;

Sensor returns Sensor:
	MotionSensor | TemperatureSensor | PressureSensor | TouchSensor | LightSensor | SmokeSensor | CO2Sensor | InfraredLightSensor | HasIntegerValue_Impl | HasBooleanValue_Impl | HumiditySensor;


EString returns ecore::EString:
	STRING | ID;

Building returns Building:
	{Building}
	'dec'
	name=EString
	'{'
		('actuators' actuators=[Actuator|EString])?
		('sensors' sensors=[Sensor|EString])?
		('ctsSystem' ctsSystem=CTS)?
		('accessControl' accessControl=AccessControl)?
		('calendarSystem' calendarSystem=CalendarSystem)?
		('meetingScheduleSystem' meetingScheduleSystem=MeetingScheduleSystem)?
		(declareComponents+=Component (declareComponents+=Component)*)?
	'}';

ModelDefinedComponents returns ModelDefinedComponents:
	{ModelDefinedComponents}
	'def'
	name=EString
	'{'
		(declareComponents+=Component (declareComponents+=Component)*)?
	'}';

Component returns Component:
	{Component}
	'dec'
	name=EString
	'('
		('sensors' sensors=[Sensor|EString])?
		('actuators' actuators=[Actuator|EString])?
		(declareComponents+=Component (declareComponents+=Component)*)?
		(':'extends+=Component (extends+=Component)*)?
	')';

LightSwitchActuator returns LightSwitchActuator:
	{LightSwitchActuator}
	'LightSwitchActuator'
	name=EString
	'{'
		('valueState' valueState=OnOff)?
	'}';

WindowActuator returns WindowActuator:
	{WindowActuator}
	'WindowActuator'
	name=EString
	'{'
		('valueState' valueState=OpenClose)?
	'}';

HumidifierActuator returns HumidifierActuator:
	{HumidifierActuator}
	'HumidifierActuator'
	name=EString
	'{'
		('valueState' valueState=OnOff)?
	'}';

DoorActuator returns DoorActuator:
	{DoorActuator}
	'DoorActuator'
	name=EString
	'{'
		('valueState' valueState=OpenClose)?
	'}';

SMSActuator returns SMSActuator:
	{SMSActuator}
	'SMSActuator'
	name=EString
	'{'
		('valueState' valueState=EString)?
	'}';

RadiatorActuator returns RadiatorActuator:
	{RadiatorActuator}
	'RadiatorActuator'
	name=EString
	'{'
		('valueState' valueState=OnOff)?
	'}';

DatabaseActuator returns DatabaseActuator:
	{DatabaseActuator}
	'DatabaseActuator'
	name=EString
	'{'
		('valueState' valueState=EString)?
	'}';

AudioAlarmActuator returns AudioAlarmActuator:
	{AudioAlarmActuator}
	'AudioAlarmActuator'
	name=EString
	'{'
		('valueState' valueState=OnOff)?
	'}';

SetsOpenCloseState_Impl returns SetsOpenCloseState:
	{SetsOpenCloseState}
	'SetsOpenCloseState'
	name=EString
	'{'
		('valueState' valueState=OpenClose)?
	'}';

SetsOnOffState_Impl returns SetsOnOffState:
	{SetsOnOffState}
	'SetsOnOffState'
	name=EString
	'{'
		('valueState' valueState=OnOff)?
	'}';

SetStringState_Impl returns SetStringState:
	{SetStringState}
	'SetStringState'
	name=EString
	'{'
		('valueState' valueState=EString)?
	'}';

OnOff returns OnOff:
	'OnOff' /* TODO: implement this rule and an appropriate IValueConverter */;

OpenClose returns OpenClose:
	'OpenClose' /* TODO: implement this rule and an appropriate IValueConverter */;

MotionSensor returns MotionSensor:
	{MotionSensor}
	(valueState?='valueState')?
	'MotionSensor'
	name=EString;

TemperatureSensor returns TemperatureSensor:
	{TemperatureSensor}
	'TemperatureSensor'
	name=EString
	'{'
		('valueState' valueState=EInt)?
	'}';

PressureSensor returns PressureSensor:
	{PressureSensor}
	'PressureSensor'
	name=EString
	'{'
		('valueState' valueState=EInt)?
	'}';

TouchSensor returns TouchSensor:
	{TouchSensor}
	(valueState?='valueState')?
	'TouchSensor'
	name=EString;

LightSensor returns LightSensor:
	{LightSensor}
	'LightSensor'
	name=EString
	'{'
		('valueState' valueState=EInt)?
	'}';

SmokeSensor returns SmokeSensor:
	{SmokeSensor}
	'SmokeSensor'
	name=EString
	'{'
		('valueState' valueState=EInt)?
	'}';

CO2Sensor returns CO2Sensor:
	{CO2Sensor}
	'CO2Sensor'
	name=EString
	'{'
		('valueState' valueState=EInt)?
	'}';

InfraredLightSensor returns InfraredLightSensor:
	{InfraredLightSensor}
	'InfraredLightSensor'
	name=EString
	'{'
		('valueState' valueState=EInt)?
	'}';

HasIntegerValue_Impl returns HasIntegerValue:
	{HasIntegerValue}
	'HasIntegerValue'
	name=EString
	'{'
		('valueState' valueState=EInt)?
	'}';

HasBooleanValue_Impl returns HasBooleanValue:
	{HasBooleanValue}
	(valueState?='valueState')?
	'HasBooleanValue'
	name=EString;

HumiditySensor returns HumiditySensor:
	{HumiditySensor}
	'HumiditySensor'
	name=EString
	'{'
		('valueState' valueState=EInt)?
	'}';

EBoolean returns ecore::EBoolean:
	'true' | 'false';

EInt returns ecore::EInt:
	'-'? INT;

CTS returns CTS:
	{CTS}
	'CTS'
	'{'
		('temperatureSensors' '{' temperatureSensors+=Sensor ( "," temperatureSensors+=Sensor)* '}' )?
		('ctsActuators' '{' ctsActuators+=Actuator ( "," ctsActuators+=Actuator)* '}' )?
	'}';

AccessControl returns AccessControl:
	{AccessControl}
	'AccessControl'
	'{'
		('accessControlSensors' '{' accessControlSensors+=Sensor ( "," accessControlSensors+=Sensor)* '}' )?
		('accessControlDoorLockActuator' '{' accessControlDoorLockActuator+=Actuator ( "," accessControlDoorLockActuator+=Actuator)* '}' )?
	'}';

CalendarSystem returns CalendarSystem:
	{CalendarSystem}
	'CalendarSystem'
	;

MeetingScheduleSystem returns MeetingScheduleSystem:
	{MeetingScheduleSystem}
	'MeetingScheduleSystem'
	;


