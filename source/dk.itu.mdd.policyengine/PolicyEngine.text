// automatically generated by Xtext
grammar org.xtext.example.mydsl.MyDsl with org.eclipse.xtext.common.Terminals

import "platform:/resource/dk.itu.mdd.policyengine/model/PolicyEngine.ecore" 
import "http://www.eclipse.org/emf/2002/Ecore" as ecore

Model returns Model:
	{Model}
	name=EString
	'{'
		(stateDefinition+=State (stateDefinition+=State)*)?
		(timers+=Timer (timers+=Timer)*)?
		(policyDefinition+=Policy (policyDefinition+=Policy)*)?
		(schedules+=Schedule (schedules+=Schedule)*)?
		('room-type' predefinedRooms+=Room)*
		(buildings+=Building (buildings+=Building)*)?
	'}';

ActuatorType returns ActuatorType:
	LightSwitchActuator | WindowActuator | HumidifierActuator | DoorActuator | RadiatorActuator | AudioAlarmActuator | ElectricalSwitchActuator | WaterValveActuator | GasValveActuator;

Statement returns Statement:
	State | Timer | If;

SensorType returns SensorType:
	MotionSensor | TemperatureSensor | RainSensor | TouchSensor | LightSensor | SmokeSensor | CO2Sensor | InfraredLightSensor | HumiditySensor;

Expression returns Expression:
	Conjunction ( {BinaryExpression.leftExpr=current} operator=('||') rightExpr=Conjunction )*;

Conjunction returns Expression: 
	Comparison ( {BinaryExpression.leftExpr=current} operator=('&&') rightExpr=Comparison )* ;

Comparison returns Expression: 
	 Primary ( {BinaryExpression.leftExpr=current} operator=('='|'!='|'<='|'<'|'>='|'>') rightExpr=(Primary | IntBoolValue) )* ;

Instance returns Expression:
	RoomInstance({InstanceExpression.leftExpr=current} operator=('.') rightExpr=ComponentInstance )* ;
	
SetStateActuator returns Expression:
	SetValue({ComponentExpression.leftExpr=current} operator=('=') rightExpr=IntBoolValue )* ;

Primary	returns Expression: 
 	UnaryExpression | '(' Expression ')' | TimeExpression | StateInstance  | SensorExpression;

Condition returns Expression: 
	'(' Expression ')' 
;

SetValue returns Expression:
	ActuatorExpression | StateInstance
;

Then returns Expression:
	ResetExpression | SetStateActuator | Instance;

UnaryExpression returns Expression:
	{UnaryExpression} operator=('!')expr= Primary;

IntBoolValue returns Expression:
		 {IntBoolValue} INT  | {IntBoolValue} EBoolean;

/* 
Expression returns Expression:
	TimeExpression | ResetExpression | InstanceExpression | BinaryExpression_Impl | UnaryExpression | ComponentExpression | ComponentInstance | StateInstance | RoomInstance | IntBoolValue | SensorExpression | ActuatorExpression;
*/
Component returns Component:
	Sensor | Actuator;

EString returns ecore::EString:
	STRING | ID;

Building returns Building:
	{Building}
	'building'
	name=EString
	'{'
		(ctsSystem=CTS)?
		(accessControl=AccessControl)?
		(calendarSystem=CalendarSystem)?
		(meetingScheduleSystem=MeetingScheduleSystem)?
		(timers+=Timer (timers+=Timer)*)?
		(floors+=Floor (floors+=Floor)*)?
	'}';
	
Room returns Room:
	{Room}
	name=EString
	('is-of-type' extends+=[Room] (','extends+=[Room])*)?
	
	('is-governed-by' policies+=[Policy] (policies+=[Policy])*
		('during' during+=[Schedule] (',' during+=[Schedule])* | 'during-always'))?
	('{'
		(declareSensor+=Sensor (declareSensor+=Sensor)*)?
		(declareActuator+=Actuator (declareActuator+=Actuator)*)?	
		(timers+=Timer (timers+=Timer)*)?		
	'}')?
	;

Policy returns Policy:
	{Policy}
	'policy'
	name=EString
	('uses sensors' (usesSensors+=SensorType (',' usesSensors+=SensorType)*)?)?
	('uses actuators' (usesActuators+=ActuatorType (',' usesActuators+=ActuatorType)*)?)?
	('uses rooms' usesRooms+=[Room] (',' usesRooms+=[Room])* )?
	'is-implemented-by' '{' specifiedBy+=Statement (specifiedBy+=Statement)* '}' 
	;

State returns State:
	{State}
	'state' name=EString (valueState?= '=' EBoolean)?
	;

Timer returns Timer:
	{Timer}
	'timer' name=EString;

Schedule returns Schedule:
	{Schedule}
	'schedule'
	name=EString
		('days' weekdays+=Weekdays ( "," weekdays+=Weekdays)*)?
		('from' from=Time 'to' to=Time)?
	;

CTS returns CTS:
	{CTS}
	'CTS'
	'{'
		('temperatureSensors' '{' temperatureSensors+=TemperatureSensor ( "," temperatureSensors+=TemperatureSensor)* '}' )?
		('ctsActuators' '{' ctsActuators+=Actuator ( "," ctsActuators+=Actuator)* '}' )?
	'}';

AccessControl returns AccessControl:
	{AccessControl}
	'AccessControl'
	'{'
		('accessControlSensors' '{' accessControlSensors+=SensorType ( "," accessControlSensors+=SensorType)* '}' )?
		('accessControlDoorLockActuator' '{' accessControlDoorLockActuator+=DoorActuator ( "," accessControlDoorLockActuator+=DoorActuator)* '}' )?
	'}';

CalendarSystem returns CalendarSystem:
	{CalendarSystem}
	'CalendarSystem'
	;

MeetingScheduleSystem returns MeetingScheduleSystem:
	{MeetingScheduleSystem}
	'MeetingScheduleSystem'
	;

Floor returns Floor:
	{Floor}
	'floor'
	name=EString
	'{'
		('room' rooms+=Room ( 'room' rooms+=Room)*)?
	'}';

TemperatureSensor returns TemperatureSensor:
	{TemperatureSensor}
	'TemperatureSensor'
	;

Actuator returns Actuator:
	{Actuator}
	'actuator'
	name=EString
	'is a' actuatorTypes+=ActuatorType ( "," actuatorTypes+=ActuatorType)*
	;


LightSwitchActuator returns LightSwitchActuator:
	{LightSwitchActuator}
	'LightSwitchActuator'
	;

WindowActuator returns WindowActuator:
	{WindowActuator}
	'WindowActuator'
	;

HumidifierActuator returns HumidifierActuator:
	{HumidifierActuator}
	'HumidifierActuator'
	;

DoorActuator returns DoorActuator:
	{DoorActuator}
	'DoorActuator'
	;

RadiatorActuator returns RadiatorActuator:
	{RadiatorActuator}
	'RadiatorActuator'
	;

AudioAlarmActuator returns AudioAlarmActuator:
	{AudioAlarmActuator}
	'AudioAlarmActuator'
	;

ElectricalSwitchActuator returns ElectricalSwitchActuator:
	{ElectricalSwitchActuator}
	'ElectricalSwitchActuator'
	;

WaterValveActuator returns WaterValveActuator:
	{WaterValveActuator}
	'WaterValveActuator'
	;

GasValveActuator returns GasValveActuator:
	{GasValveActuator}
	'GasValveActuator'
	;

MotionSensor returns MotionSensor:
	{MotionSensor}
	'MotionSensor'
	;

RainSensor returns RainSensor:
	{RainSensor}
	'RainSensor'
	;

TouchSensor returns TouchSensor:
	{TouchSensor}
	'TouchSensor'
	;

LightSensor returns LightSensor:
	{LightSensor}
	'LightSensor'
	;

SmokeSensor returns SmokeSensor:
	{SmokeSensor}
	'SmokeSensor'
	;

CO2Sensor returns CO2Sensor:
	{CO2Sensor}
	'CO2Sensor'
	;

InfraredLightSensor returns InfraredLightSensor:
	{InfraredLightSensor}
	'InfraredLightSensor'
	;

HumiditySensor returns HumiditySensor:
	{HumiditySensor}
	'HumiditySensor'
	;

Sensor returns Sensor:
	{Sensor}
	'sensor'
	name=EString
	('is a' sensorTypes+=SensorType ( "," sensorTypes+=SensorType)*)?
	;

If returns If:
	'if' cond=Condition
	'{'
		(then+=Then (then+=Then)*)?
		(elseif+=Statement (elseif+=Statement)*)?
	'}'('else' '{' 
		(then+=Then (then+=Then)*)?
		(else+=Statement (else+=Statement)*)? '}'
	)?;

TimeExpression returns TimeExpression:
	time=[Timer] 'reaches' timeAmount=EInt ('seconds' | 'minutes' | 'hours' | 'days' );

ResetExpression returns ResetExpression:
	'reset'  reset=[Timer];


InstanceExpression returns InstanceExpression:
	'InstanceExpression'
	'{'
		'operator' operator=EString
		'leftExpr' leftExpr=Expression
		'rightExpr' rightExpr=Expression
	'}';

BinaryExpression_Impl returns BinaryExpression:
	'BinaryExpression'
	'{'
		'operator' operator=EString
		'leftExpr' leftExpr=Expression
		'rightExpr' rightExpr=Expression
	'}';

ComponentExpression returns ComponentExpression:
	'ComponentExpression'
	'{'
		'operator' operator=EString
		'leftExpr' leftExpr=Expression
		'rightExpr' rightExpr=Expression
	'}';

ComponentInstance returns ComponentInstance:
	{ComponentInstance}
		(instance=[Component] '=' EInt)?;

StateInstance returns StateInstance:
	{StateInstance}
	'state-instance''.'
		(defineState=[State])?
	;

RoomInstance returns RoomInstance:
	{RoomInstance}
	'room-instance''.'
		(roomInstance=[Room])?
	;

SensorExpression returns SensorExpression:
	{SensorExpression}
		(sen=SensorType)?
		'.''value'
	;

ActuatorExpression returns ActuatorExpression:
	{ActuatorExpression}
		(act=ActuatorType)?
		'.''setValue'
	;

EInt returns ecore::EInt:
	'-'? INT;

EBoolean returns ecore::EBoolean:
	'true' | 'false';

enum Weekdays:
	MONDAY = 'Monday' | TUESDAY = 'Tuesday' | WEDNESDAY = 'Wednesday' | THURSDAY = 'Thursday' | FRIDAY = 'Friday' | SATURDAY = 'Saturday' | SUNDAY = 'Sunday'
	;

Time returns Time:
	{Time}
		(hours=EShort ':' minutes=EShort)?
	;

EShort returns ecore::EShort:
	'-'? INT;
	