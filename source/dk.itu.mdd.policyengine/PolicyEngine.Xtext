// automatically generated by Xtext
grammar org.xtext.example.mydsl.MyDsl with org.eclipse.xtext.common.Terminals

import "platform:/resource/dk.itu.mdd.policyengine/model/PolicyEngine.ecore" 
import "http://www.eclipse.org/emf/2002/Ecore" as ecore

Model returns Model:
	{Model}
	name=EString
	'{'
		(stateDefinition+=State (stateDefinition+=State)*)?
		(timers+=Timer (timers+=Timer)*)?
		(policyDefinition+=Policy (policyDefinition+=Policy)*)?
		(schedules+=Schedule (schedules+=Schedule)*)?
		('room-type' predefinedRooms+=Room)*
		(buildings+=Building (buildings+=Building)*)?
	'}';



Actuator returns Actuator:
	LightSwitchActuator | WindowActuator | HumidifierActuator | DoorActuator | RadiatorActuator | AudioAlarmActuator;

Sensor returns Sensor:
	MotionSensor | TemperatureSensor | PressureSensor | TouchSensor | LightSensor | SmokeSensor | CO2Sensor | InfraredLightSensor | HumiditySensor;

terminal NULL: 'null';

Exp returns Exp: 
	Conjunction ( {BOp.lexpr=current} operator='||' rexpr=Conjunction )* ;
Conjunction returns Exp: 
	Comparison ( {BOp.lexpr=current} operator='&&' rexpr=Comparison )* ;
Comparison returns Exp: 
	Addition ( {BOp.lexpr=current} operator=('='|'!='|'<='|'<'|'>='|'>') rexpr=Addition )* ;
Addition returns Exp: 
	Multipl ( {BOp.lexpr=current} operator=('+'|'-') rexpr=Multipl )* ; // FunCall; 
Multipl returns Exp: 
	BOpMethod ({BOp.lexpr=current} operator=('*') rexpr=BOpMethod )* ;
BOpMethod returns Exp:
	Primary ({BOpMethod.lexpr=current} '.' operator=ID '(' rexpr=Exp ')')* ;	
Primary	returns Exp: 
	{NULL} NULL | {Const} INT | {Const} EBoolean |{Id} name=ID | UOp | '(' Exp ')' | FunCall | ResetExpression | TimeExpression | RoomUsage;
UOp	returns Exp: 
	{UOp} operator="!" expr=Primary | {UOp} operator="-" expr=Primary ;
FunCall returns Exp:
	{FunCall} name=ID '(' (arg+=Exp (',' arg+=Exp)*)? ')'; 

EString returns ecore::EString:
	STRING | ID;


State returns State:
	{State}
	(valueState?='valueState')?
	'state'
	name=EString ('=' exprStates=Exp)?
	;


Timer returns Timer:
	{Timer}
	'timer'
	name=EString;

Schedule returns Schedule:
	{Schedule}
	'schedule'
	name=EString
		('days' weekdays+=Weekdays ( "," weekdays+=Weekdays)*)?
		('from' from=Time 'to' to=Time)?
	;

Policy returns Policy:
	{Policy}
	'policy'
	name=EString
	('uses sensors' (usesSensors+=Sensor (',' usesSensors+=Sensor)*)?)?
	('uses actuators' (usesActuators+=Actuator (',' usesActuators+=Actuator)*)?)?
	('uses rooms' usesRooms+=[Room|EString] ("," usesRooms+=[Room|EString])* )?
	'is-implemented-by' '{' 
	(defineLocalState+=State (defineLocalState+=State)*)?
	(controlledBy+=Timer ( controlledBy+=Timer)*)?
	specifiedBy+=If ( specifiedBy+=If)* '}' 
	;


Building returns Building:
	{Building}
	'building'
	name=EString
	'{'
		(ctsSystem=CTS)?
		(accessControl=AccessControl)?
		(calendarSystem=CalendarSystem)?
		(meetingScheduleSystem=MeetingScheduleSystem)?
		(floors+=Floor (floors+=Floor)*)?
		(timers+=Timer (timers+=Timer)*)?
	'}';
	
Floor returns Floor:
	{Floor}
	'floor'
	name=EString
	'{'
		('room' rooms+=Room ( 'room' rooms+=Room)*)?
		//('timers' timers+=Timer (timers+=Timer)*)?
	'}';

Room returns Room:
	{Room}
	name=EString
	('is-of-type' extends+=[Room|EString] (',' extends+=[Room|EString])*)?
	
	('is-governed-by' policies+=[Policy|EString] (',' policies+=[Policy|EString])*
		('during' during+=[Schedule|EString] (',' during+=[Schedule|EString])*
		|
		'during-always')
	)?
	('{'
		(declareSensor+=SensorComponent (declareSensor+=SensorComponent)*)?
		(declareActuator+=ActuatorComponent (declareActuator+=ActuatorComponent)*)?		
		(timers+=Timer (timers+=Timer)*)?		
	'}')?
	;


CTS returns CTS:
	{CTS}
	'CTS'
	'{'
		('temperatureSensors' '{' temperatureSensors+=Sensor ( "," temperatureSensors+=Sensor)* '}' )?
		('ctsActuators' '{' ctsActuators+=Actuator ( "," ctsActuators+=Actuator)* '}' )?
	'}';

AccessControl returns AccessControl:
	{AccessControl}
	'AccessControl'
	'{'
		('accessControlSensors' '{' accessControlSensors+=Sensor ( "," accessControlSensors+=Sensor)* '}' )?
		('accessControlDoorLockActuator' '{' accessControlDoorLockActuator+=Actuator ( "," accessControlDoorLockActuator+=Actuator)* '}' )?
	'}';

EInt returns ecore::EInt:
	'-'? INT;

CalendarSystem returns CalendarSystem:
	{CalendarSystem}
	'CalendarSystem'
	;

MeetingScheduleSystem returns MeetingScheduleSystem:
	{MeetingScheduleSystem}
	'MeetingScheduleSystem'
	;

MotionSensor returns MotionSensor:
	{MotionSensor}
	'MotionSensor'
		('valueState' valueState=EInt)?	;

TemperatureSensor returns TemperatureSensor:
	{TemperatureSensor}
	'TemperatureSensor'
		('valueState' valueState=EInt)? ;

PressureSensor returns PressureSensor:
	{PressureSensor}
	'PressureSensor'
		('valueState' valueState=EInt)? ;

TouchSensor returns TouchSensor:
	{TouchSensor}
	'TouchSensor'
		('valueState' valueState=EInt)? ;

LightSensor returns LightSensor:
	{LightSensor}
	'LightSensor'
		('valueState' valueState=EInt)? ;

SmokeSensor returns SmokeSensor:
	{SmokeSensor}
	'SmokeSensor'
		('valueState' valueState=EInt)? ;

CO2Sensor returns CO2Sensor:
	{CO2Sensor}
	'CO2Sensor'
		('valueState' valueState=EInt)? ;

InfraredLightSensor returns InfraredLightSensor:
	{InfraredLightSensor}
	'InfraredLightSensor'
		('valueState' valueState=EInt)? ;

HumiditySensor returns HumiditySensor:
	{HumiditySensor}
	'HumiditySensor'
		('valueState' valueState=EInt)? ;

LightSwitchActuator returns LightSwitchActuator:
	{LightSwitchActuator}
	'LightSwitchActuator'
		('valueState' valueState=EInt)? ;

WindowActuator returns WindowActuator:
	{WindowActuator}
	'WindowActuator'
		('valueState' valueState=EInt)? ;

HumidifierActuator returns HumidifierActuator:
	{HumidifierActuator}
	'HumidifierActuator'
		('valueState' valueState=EInt)? ;

DoorActuator returns DoorActuator:
	{DoorActuator}
	'DoorActuator'
		('valueState' valueState=EInt)? ;

RadiatorActuator returns RadiatorActuator:
	{RadiatorActuator}
	'RadiatorActuator'
		('valueState' valueState=EInt)? ;

AudioAlarmActuator returns AudioAlarmActuator:
	{AudioAlarmActuator}
	'AudioAlarmActuator'
		('valueState' valueState=EInt)? ;

SensorComponent returns SensorComponent:
	{SensorComponent}
	'sensor '
	name=EString
		('is a ' sensors+=Sensor (sensors+=Sensor)*)?
	;

ActuatorComponent returns ActuatorComponent:
	{ActuatorComponent}
	'actuator'
	name=EString
		('is a ' actuators+=Actuator (actuators+=Actuator)*)?
	;



If returns If:
	'if'
		'(' cond=Exp ')'
		'{'( then+=Exp ( "," then+=Exp)* )?	( elseif+=If ( "," elseif+=If)*  )? '}'
		('else' '{' (elseif+=If ( elseif+=If)* )? (else=Exp)? '}' )?
	;

RoomUsage returns RoomUsage:
	{RoomUsage}
	(defineState=[State|EString] '.') | sen=Sensor | act=Actuator;

TimeExpression returns TimeExpression:
	time=[Timer|EString] 'reaches' TimeBound=EInt ('seconds' | 'minutes' | 'hours' | 'days' );

ResetExpression returns ResetExpression:
	'reset'  reset=[Timer|EString] ;


EBoolean returns ecore::EBoolean:
	'true' | 'false';

enum Weekdays:
	MONDAY = 'Monday' | TUESDAY = 'Tuesday' | WEDNESDAY = 'Wednesday' | THURSDAY = 'Thursday' | FRIDAY = 'Friday' | SATURDAY = 'Saturday' | SUNDAY = 'Sunday'
	;

Time returns Time:
	{Time}
		(hours=EShort ':' minutes=EShort)?
	;


EShort returns ecore::EShort:
	'-'? INT;



