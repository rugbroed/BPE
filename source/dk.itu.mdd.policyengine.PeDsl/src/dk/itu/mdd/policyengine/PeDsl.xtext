// automatically generated by Xtext
grammar dk.itu.mdd.policyengine.PeDsl with org.eclipse.xtext.common.Terminals

import "platform:/resource/bpe/model/PolicyEngine.ecore" 
import "http://www.eclipse.org/emf/2002/Ecore" as ecore

Model returns Model:
	{Model}
	name=EString
	'{'
		(predefinedRooms+=Room (predefinedRooms+=Room)*)?
		(buildings+=Building (buildings+=Building)*)?
		(stateDefinition+=State (stateDefinition+=State)*)?
	'}';











Actuator returns Actuator:
	LightSwitchActuator | WindowActuator | HumidifierActuator | DoorActuator | RadiatorActuator | AudioAlarmActuator | HasIntValue_Impl;

Sensor returns Sensor:
	MotionSensor | TemperatureSensor | PressureSensor | TouchSensor | LightSensor | SmokeSensor | CO2Sensor | InfraredLightSensor | HasIntegerValue_Impl | HumiditySensor;

EString returns ecore::EString:
	STRING | ID;

Building returns Building:
	{Building}
	'building'
	name=EString
	'{'
		(declareSensors+=SensorComponent (declareSensors+=SensorComponent)*)?
		(declareActuators+=ActuatorComponent (declareActuators+=ActuatorComponent)*)?
		(ctsSystem=CTS)?
		(accessControl=AccessControl)?
		(calendarSystem=CalendarSystem)?
		(meetingScheduleSystem=MeetingScheduleSystem)?
		(floors+=Floor (floors+=Floor)*)?
	'}';

Room returns Room:
	{Room}
	'room'
	name=EString
	('is a ' extends=[Room|EString])?
	'{'
		(declareSensor+=SensorComponent (declareSensor+=SensorComponent)*)?
		(declareActuator+=ActuatorComponent (declareActuator+=ActuatorComponent)*)?
	'}';

State returns State:
	{State}
	'State'
	name=EString
		('uses ' uses+=Actuator (uses+=Actuator)*)?
	;

CTS returns CTS:
	{CTS}
	'CTS'
	'{'
		('temperatureSensors' '{' temperatureSensors+=Sensor ( "," temperatureSensors+=Sensor)* '}' )?
		('ctsActuators' '{' ctsActuators+=Actuator ( "," ctsActuators+=Actuator)* '}' )?
	'}';

AccessControl returns AccessControl:
	{AccessControl}
	'AccessControl'
	'{'
		('accessControlSensors' '{' accessControlSensors+=Sensor ( "," accessControlSensors+=Sensor)* '}' )?
		('accessControlDoorLockActuator' '{' accessControlDoorLockActuator+=Actuator ( "," accessControlDoorLockActuator+=Actuator)* '}' )?
	'}';

CalendarSystem returns CalendarSystem:
	{CalendarSystem}
	'CalendarSystem'
	;

MeetingScheduleSystem returns MeetingScheduleSystem:
	{MeetingScheduleSystem}
	'MeetingScheduleSystem'
	;

Floor returns Floor:
	{Floor}
	'floor'
	name=EString
	'{'
		(declareSensors+=SensorComponent (declareSensors+=SensorComponent)*)?
		(declareActuators+=ActuatorComponent (declareActuators+=ActuatorComponent)*)?
		(rooms+=Room (rooms+=Room)*)?
	'}';

SensorComponent returns SensorComponent:
	{SensorComponent}
	'sensor '
	name=EString
		('is a ' sensors+=Sensor (sensors+=Sensor)*)?
	;

ActuatorComponent returns ActuatorComponent:
	{ActuatorComponent}
	'actuator'
	name=EString
		('is a 'actuators+=Actuator (actuators+=Actuator)*)?
	;

MotionSensor returns MotionSensor:
	{MotionSensor}
	'MotionSensor'
		('{' 'valueState' '=' valueState=EInt '}')?
	;

TemperatureSensor returns TemperatureSensor:
	{TemperatureSensor}
	'TemperatureSensor'
		('{' 'valueState' '=' valueState=EInt '}')?
	;

PressureSensor returns PressureSensor:
	{PressureSensor}
	'PressureSensor'
		('{' 'valueState' '=' valueState=EInt '}')?
	;

TouchSensor returns TouchSensor:
	{TouchSensor}
	'TouchSensor'
		('{' 'valueState' '=' valueState=EInt '}')?
	;

LightSensor returns LightSensor:
	{LightSensor}
	'LightSensor'
		('{' 'valueState' '=' valueState=EInt '}')?
	;

SmokeSensor returns SmokeSensor:
	{SmokeSensor}
	'SmokeSensor'
		('{' 'valueState' '=' valueState=EInt '}')?
	;

CO2Sensor returns CO2Sensor:
	{CO2Sensor}
	'CO2Sensor'
		('{' 'valueState' '=' valueState=EInt '}')?
	;

InfraredLightSensor returns InfraredLightSensor:
	{InfraredLightSensor}
	'InfraredLightSensor'
		('{' 'valueState' '=' valueState=EInt '}')?
	;

HasIntegerValue_Impl returns HasIntegerValue:
	{HasIntegerValue}
	'HasIntegerValue'
		('{' 'valueState' '=' valueState=EInt '}')?
	;

HumiditySensor returns HumiditySensor:
	{HumiditySensor}
	'HumiditySensor'
		('{' 'valueState' '=' valueState=EInt '}')?
	;

EInt returns ecore::EInt:
	'-'? INT;

LightSwitchActuator returns LightSwitchActuator:
	{LightSwitchActuator}
	'LightSwitchActuator'
		('{' 'valueState' '=' valueState=EInt '}')?
	;

WindowActuator returns WindowActuator:
	{WindowActuator}
	'WindowActuator'
		('{' 'valueState' '=' valueState=EInt '}')?
	;

HumidifierActuator returns HumidifierActuator:
	{HumidifierActuator}
	'HumidifierActuator'
		('{' 'valueState' '=' valueState=EInt '}')?
	;

DoorActuator returns DoorActuator:
	{DoorActuator}
	'DoorActuator'
		('{' 'valueState' '=' valueState=EInt '}')?
	;

RadiatorActuator returns RadiatorActuator:
	{RadiatorActuator}
	'RadiatorActuator'	
		('{' 'valueState' '=' valueState=EInt '}')?
	;

AudioAlarmActuator returns AudioAlarmActuator:
	{AudioAlarmActuator}
	'AudioAlarmActuator'
		('{' 'valueState' '=' valueState=EInt '}')?
	;

HasIntValue_Impl returns HasIntValue:
	{HasIntValue}
	'HasIntValue'
		('{' 'valueState' '=' valueState=EInt '}')?
	;
