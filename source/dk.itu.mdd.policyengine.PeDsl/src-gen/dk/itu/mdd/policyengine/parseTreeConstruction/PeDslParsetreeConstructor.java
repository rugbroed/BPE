/*
* generated by Xtext
*/
package dk.itu.mdd.policyengine.parseTreeConstruction;

import org.eclipse.emf.ecore.*;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parsetree.reconstr.IEObjectConsumer;
import org.eclipse.xtext.parsetree.reconstr.impl.AbstractParseTreeConstructor;

import dk.itu.mdd.policyengine.services.PeDslGrammarAccess;

import com.google.inject.Inject;

@SuppressWarnings("all")
public class PeDslParsetreeConstructor extends AbstractParseTreeConstructor {
		
	@Inject
	private PeDslGrammarAccess grammarAccess;
	
	@Override
	protected AbstractToken getRootToken(IEObjectConsumer inst) {
		return new ThisRootNode(inst);	
	}
	
protected class ThisRootNode extends RootToken {
	public ThisRootNode(IEObjectConsumer inst) {
		super(inst);
	}
	
	@Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Model_Group(this, this, 0, inst);
			case 1: return new Actuator_Alternatives(this, this, 1, inst);
			case 2: return new Sensor_Alternatives(this, this, 2, inst);
			case 3: return new Building_Group(this, this, 3, inst);
			case 4: return new Room_Group(this, this, 4, inst);
			case 5: return new State_Group(this, this, 5, inst);
			case 6: return new CTS_Group(this, this, 6, inst);
			case 7: return new AccessControl_Group(this, this, 7, inst);
			case 8: return new CalendarSystem_Group(this, this, 8, inst);
			case 9: return new MeetingScheduleSystem_Group(this, this, 9, inst);
			case 10: return new Floor_Group(this, this, 10, inst);
			case 11: return new SensorComponent_Group(this, this, 11, inst);
			case 12: return new ActuatorComponent_Group(this, this, 12, inst);
			case 13: return new MotionSensor_Group(this, this, 13, inst);
			case 14: return new TemperatureSensor_Group(this, this, 14, inst);
			case 15: return new PressureSensor_Group(this, this, 15, inst);
			case 16: return new TouchSensor_Group(this, this, 16, inst);
			case 17: return new LightSensor_Group(this, this, 17, inst);
			case 18: return new SmokeSensor_Group(this, this, 18, inst);
			case 19: return new CO2Sensor_Group(this, this, 19, inst);
			case 20: return new InfraredLightSensor_Group(this, this, 20, inst);
			case 21: return new HasIntegerValue_Impl_Group(this, this, 21, inst);
			case 22: return new HumiditySensor_Group(this, this, 22, inst);
			case 23: return new LightSwitchActuator_Group(this, this, 23, inst);
			case 24: return new WindowActuator_Group(this, this, 24, inst);
			case 25: return new HumidifierActuator_Group(this, this, 25, inst);
			case 26: return new DoorActuator_Group(this, this, 26, inst);
			case 27: return new RadiatorActuator_Group(this, this, 27, inst);
			case 28: return new AudioAlarmActuator_Group(this, this, 28, inst);
			case 29: return new HasIntValue_Impl_Group(this, this, 29, inst);
			default: return null;
		}	
	}	
}
	

/************ begin Rule Model ****************
 *
 * Model:
 * 	{Model} name=EString "{" (predefinedRooms+=Room predefinedRooms+=Room*)? (buildings+=Building buildings+=Building*)?
 * 	(stateDefinition+=State stateDefinition+=State*)? "}";
 *
 **/

// {Model} name=EString "{" (predefinedRooms+=Room predefinedRooms+=Room*)? (buildings+=Building buildings+=Building*)?
// (stateDefinition+=State stateDefinition+=State*)? "}"
protected class Model_Group extends GroupToken {
	
	public Model_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getModelAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Model_RightCurlyBracketKeyword_6(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getModelAccess().getModelAction_0().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// {Model}
protected class Model_ModelAction_0 extends ActionToken  {

	public Model_ModelAction_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Action getGrammarElement() {
		return grammarAccess.getModelAccess().getModelAction_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(!eObjectConsumer.isConsumed()) return null;
		return eObjectConsumer;
	}
}

// name=EString
protected class Model_NameAssignment_1 extends AssignmentToken  {
	
	public Model_NameAssignment_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getModelAccess().getNameAssignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Model_ModelAction_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("name",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("name");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getModelAccess().getNameEStringParserRuleCall_1_0(), value, null)) {
			type = AssignmentType.DATATYPE_RULE_CALL;
			element = grammarAccess.getModelAccess().getNameEStringParserRuleCall_1_0();
			return obj;
		}
		return null;
	}

}

// "{"
protected class Model_LeftCurlyBracketKeyword_2 extends KeywordToken  {
	
	public Model_LeftCurlyBracketKeyword_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getModelAccess().getLeftCurlyBracketKeyword_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Model_NameAssignment_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// (predefinedRooms+=Room predefinedRooms+=Room*)?
protected class Model_Group_3 extends GroupToken {
	
	public Model_Group_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getModelAccess().getGroup_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Model_PredefinedRoomsAssignment_3_1(lastRuleCallOrigin, this, 0, inst);
			case 1: return new Model_PredefinedRoomsAssignment_3_0(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}

// predefinedRooms+=Room
protected class Model_PredefinedRoomsAssignment_3_0 extends AssignmentToken  {
	
	public Model_PredefinedRoomsAssignment_3_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getModelAccess().getPredefinedRoomsAssignment_3_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Room_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("predefinedRooms",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("predefinedRooms");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getRoomRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getModelAccess().getPredefinedRoomsRoomParserRuleCall_3_0_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Model_LeftCurlyBracketKeyword_2(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// predefinedRooms+=Room*
protected class Model_PredefinedRoomsAssignment_3_1 extends AssignmentToken  {
	
	public Model_PredefinedRoomsAssignment_3_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getModelAccess().getPredefinedRoomsAssignment_3_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Room_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("predefinedRooms",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("predefinedRooms");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getRoomRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getModelAccess().getPredefinedRoomsRoomParserRuleCall_3_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Model_PredefinedRoomsAssignment_3_1(lastRuleCallOrigin, next, actIndex, consumed);
			case 1: return new Model_PredefinedRoomsAssignment_3_0(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


// (buildings+=Building buildings+=Building*)?
protected class Model_Group_4 extends GroupToken {
	
	public Model_Group_4(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getModelAccess().getGroup_4();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Model_BuildingsAssignment_4_1(lastRuleCallOrigin, this, 0, inst);
			case 1: return new Model_BuildingsAssignment_4_0(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}

// buildings+=Building
protected class Model_BuildingsAssignment_4_0 extends AssignmentToken  {
	
	public Model_BuildingsAssignment_4_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getModelAccess().getBuildingsAssignment_4_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Building_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("buildings",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("buildings");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getBuildingRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getModelAccess().getBuildingsBuildingParserRuleCall_4_0_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Model_Group_3(lastRuleCallOrigin, next, actIndex, consumed);
			case 1: return new Model_LeftCurlyBracketKeyword_2(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// buildings+=Building*
protected class Model_BuildingsAssignment_4_1 extends AssignmentToken  {
	
	public Model_BuildingsAssignment_4_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getModelAccess().getBuildingsAssignment_4_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Building_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("buildings",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("buildings");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getBuildingRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getModelAccess().getBuildingsBuildingParserRuleCall_4_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Model_BuildingsAssignment_4_1(lastRuleCallOrigin, next, actIndex, consumed);
			case 1: return new Model_BuildingsAssignment_4_0(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


// (stateDefinition+=State stateDefinition+=State*)?
protected class Model_Group_5 extends GroupToken {
	
	public Model_Group_5(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getModelAccess().getGroup_5();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Model_StateDefinitionAssignment_5_1(lastRuleCallOrigin, this, 0, inst);
			case 1: return new Model_StateDefinitionAssignment_5_0(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}

// stateDefinition+=State
protected class Model_StateDefinitionAssignment_5_0 extends AssignmentToken  {
	
	public Model_StateDefinitionAssignment_5_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getModelAccess().getStateDefinitionAssignment_5_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new State_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("stateDefinition",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("stateDefinition");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getStateRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getModelAccess().getStateDefinitionStateParserRuleCall_5_0_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Model_Group_4(lastRuleCallOrigin, next, actIndex, consumed);
			case 1: return new Model_Group_3(lastRuleCallOrigin, next, actIndex, consumed);
			case 2: return new Model_LeftCurlyBracketKeyword_2(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// stateDefinition+=State*
protected class Model_StateDefinitionAssignment_5_1 extends AssignmentToken  {
	
	public Model_StateDefinitionAssignment_5_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getModelAccess().getStateDefinitionAssignment_5_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new State_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("stateDefinition",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("stateDefinition");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getStateRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getModelAccess().getStateDefinitionStateParserRuleCall_5_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Model_StateDefinitionAssignment_5_1(lastRuleCallOrigin, next, actIndex, consumed);
			case 1: return new Model_StateDefinitionAssignment_5_0(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


// "}"
protected class Model_RightCurlyBracketKeyword_6 extends KeywordToken  {
	
	public Model_RightCurlyBracketKeyword_6(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getModelAccess().getRightCurlyBracketKeyword_6();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Model_Group_5(lastRuleCallOrigin, this, 0, inst);
			case 1: return new Model_Group_4(lastRuleCallOrigin, this, 1, inst);
			case 2: return new Model_Group_3(lastRuleCallOrigin, this, 2, inst);
			case 3: return new Model_LeftCurlyBracketKeyword_2(lastRuleCallOrigin, this, 3, inst);
			default: return null;
		}	
	}

}


/************ end Rule Model ****************/


/************ begin Rule Actuator ****************
 *
 * Actuator:
 * 	LightSwitchActuator | WindowActuator | HumidifierActuator | DoorActuator | RadiatorActuator | AudioAlarmActuator |
 * 	HasIntValue_Impl;
 *
 **/

// LightSwitchActuator | WindowActuator | HumidifierActuator | DoorActuator | RadiatorActuator | AudioAlarmActuator |
// HasIntValue_Impl
protected class Actuator_Alternatives extends AlternativesToken {

	public Actuator_Alternatives(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getActuatorAccess().getAlternatives();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Actuator_LightSwitchActuatorParserRuleCall_0(lastRuleCallOrigin, this, 0, inst);
			case 1: return new Actuator_WindowActuatorParserRuleCall_1(lastRuleCallOrigin, this, 1, inst);
			case 2: return new Actuator_HumidifierActuatorParserRuleCall_2(lastRuleCallOrigin, this, 2, inst);
			case 3: return new Actuator_DoorActuatorParserRuleCall_3(lastRuleCallOrigin, this, 3, inst);
			case 4: return new Actuator_RadiatorActuatorParserRuleCall_4(lastRuleCallOrigin, this, 4, inst);
			case 5: return new Actuator_AudioAlarmActuatorParserRuleCall_5(lastRuleCallOrigin, this, 5, inst);
			case 6: return new Actuator_HasIntValue_ImplParserRuleCall_6(lastRuleCallOrigin, this, 6, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getAudioAlarmActuatorAccess().getAudioAlarmActuatorAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getDoorActuatorAccess().getDoorActuatorAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getHasIntValue_ImplAccess().getHasIntValueAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getHumidifierActuatorAccess().getHumidifierActuatorAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getLightSwitchActuatorAccess().getLightSwitchActuatorAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getRadiatorActuatorAccess().getRadiatorActuatorAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getWindowActuatorAccess().getWindowActuatorAction_0().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// LightSwitchActuator
protected class Actuator_LightSwitchActuatorParserRuleCall_0 extends RuleCallToken {
	
	public Actuator_LightSwitchActuatorParserRuleCall_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getActuatorAccess().getLightSwitchActuatorParserRuleCall_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new LightSwitchActuator_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getLightSwitchActuatorAccess().getLightSwitchActuatorAction_0().getType().getClassifier())
			return null;
		if(checkForRecursion(LightSwitchActuator_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// WindowActuator
protected class Actuator_WindowActuatorParserRuleCall_1 extends RuleCallToken {
	
	public Actuator_WindowActuatorParserRuleCall_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getActuatorAccess().getWindowActuatorParserRuleCall_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new WindowActuator_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getWindowActuatorAccess().getWindowActuatorAction_0().getType().getClassifier())
			return null;
		if(checkForRecursion(WindowActuator_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// HumidifierActuator
protected class Actuator_HumidifierActuatorParserRuleCall_2 extends RuleCallToken {
	
	public Actuator_HumidifierActuatorParserRuleCall_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getActuatorAccess().getHumidifierActuatorParserRuleCall_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new HumidifierActuator_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getHumidifierActuatorAccess().getHumidifierActuatorAction_0().getType().getClassifier())
			return null;
		if(checkForRecursion(HumidifierActuator_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// DoorActuator
protected class Actuator_DoorActuatorParserRuleCall_3 extends RuleCallToken {
	
	public Actuator_DoorActuatorParserRuleCall_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getActuatorAccess().getDoorActuatorParserRuleCall_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new DoorActuator_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getDoorActuatorAccess().getDoorActuatorAction_0().getType().getClassifier())
			return null;
		if(checkForRecursion(DoorActuator_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// RadiatorActuator
protected class Actuator_RadiatorActuatorParserRuleCall_4 extends RuleCallToken {
	
	public Actuator_RadiatorActuatorParserRuleCall_4(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getActuatorAccess().getRadiatorActuatorParserRuleCall_4();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new RadiatorActuator_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getRadiatorActuatorAccess().getRadiatorActuatorAction_0().getType().getClassifier())
			return null;
		if(checkForRecursion(RadiatorActuator_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// AudioAlarmActuator
protected class Actuator_AudioAlarmActuatorParserRuleCall_5 extends RuleCallToken {
	
	public Actuator_AudioAlarmActuatorParserRuleCall_5(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getActuatorAccess().getAudioAlarmActuatorParserRuleCall_5();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new AudioAlarmActuator_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getAudioAlarmActuatorAccess().getAudioAlarmActuatorAction_0().getType().getClassifier())
			return null;
		if(checkForRecursion(AudioAlarmActuator_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// HasIntValue_Impl
protected class Actuator_HasIntValue_ImplParserRuleCall_6 extends RuleCallToken {
	
	public Actuator_HasIntValue_ImplParserRuleCall_6(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getActuatorAccess().getHasIntValue_ImplParserRuleCall_6();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new HasIntValue_Impl_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getHasIntValue_ImplAccess().getHasIntValueAction_0().getType().getClassifier())
			return null;
		if(checkForRecursion(HasIntValue_Impl_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}


/************ end Rule Actuator ****************/


/************ begin Rule Sensor ****************
 *
 * Sensor:
 * 	MotionSensor | TemperatureSensor | PressureSensor | TouchSensor | LightSensor | SmokeSensor | CO2Sensor |
 * 	InfraredLightSensor | HasIntegerValue_Impl | HumiditySensor;
 *
 **/

// MotionSensor | TemperatureSensor | PressureSensor | TouchSensor | LightSensor | SmokeSensor | CO2Sensor |
// InfraredLightSensor | HasIntegerValue_Impl | HumiditySensor
protected class Sensor_Alternatives extends AlternativesToken {

	public Sensor_Alternatives(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getSensorAccess().getAlternatives();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Sensor_MotionSensorParserRuleCall_0(lastRuleCallOrigin, this, 0, inst);
			case 1: return new Sensor_TemperatureSensorParserRuleCall_1(lastRuleCallOrigin, this, 1, inst);
			case 2: return new Sensor_PressureSensorParserRuleCall_2(lastRuleCallOrigin, this, 2, inst);
			case 3: return new Sensor_TouchSensorParserRuleCall_3(lastRuleCallOrigin, this, 3, inst);
			case 4: return new Sensor_LightSensorParserRuleCall_4(lastRuleCallOrigin, this, 4, inst);
			case 5: return new Sensor_SmokeSensorParserRuleCall_5(lastRuleCallOrigin, this, 5, inst);
			case 6: return new Sensor_CO2SensorParserRuleCall_6(lastRuleCallOrigin, this, 6, inst);
			case 7: return new Sensor_InfraredLightSensorParserRuleCall_7(lastRuleCallOrigin, this, 7, inst);
			case 8: return new Sensor_HasIntegerValue_ImplParserRuleCall_8(lastRuleCallOrigin, this, 8, inst);
			case 9: return new Sensor_HumiditySensorParserRuleCall_9(lastRuleCallOrigin, this, 9, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getCO2SensorAccess().getCO2SensorAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getHasIntegerValue_ImplAccess().getHasIntegerValueAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getHumiditySensorAccess().getHumiditySensorAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getInfraredLightSensorAccess().getInfraredLightSensorAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getLightSensorAccess().getLightSensorAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getMotionSensorAccess().getMotionSensorAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getPressureSensorAccess().getPressureSensorAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getSmokeSensorAccess().getSmokeSensorAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getTemperatureSensorAccess().getTemperatureSensorAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getTouchSensorAccess().getTouchSensorAction_0().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// MotionSensor
protected class Sensor_MotionSensorParserRuleCall_0 extends RuleCallToken {
	
	public Sensor_MotionSensorParserRuleCall_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getSensorAccess().getMotionSensorParserRuleCall_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new MotionSensor_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getMotionSensorAccess().getMotionSensorAction_0().getType().getClassifier())
			return null;
		if(checkForRecursion(MotionSensor_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// TemperatureSensor
protected class Sensor_TemperatureSensorParserRuleCall_1 extends RuleCallToken {
	
	public Sensor_TemperatureSensorParserRuleCall_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getSensorAccess().getTemperatureSensorParserRuleCall_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new TemperatureSensor_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getTemperatureSensorAccess().getTemperatureSensorAction_0().getType().getClassifier())
			return null;
		if(checkForRecursion(TemperatureSensor_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// PressureSensor
protected class Sensor_PressureSensorParserRuleCall_2 extends RuleCallToken {
	
	public Sensor_PressureSensorParserRuleCall_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getSensorAccess().getPressureSensorParserRuleCall_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new PressureSensor_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getPressureSensorAccess().getPressureSensorAction_0().getType().getClassifier())
			return null;
		if(checkForRecursion(PressureSensor_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// TouchSensor
protected class Sensor_TouchSensorParserRuleCall_3 extends RuleCallToken {
	
	public Sensor_TouchSensorParserRuleCall_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getSensorAccess().getTouchSensorParserRuleCall_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new TouchSensor_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getTouchSensorAccess().getTouchSensorAction_0().getType().getClassifier())
			return null;
		if(checkForRecursion(TouchSensor_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// LightSensor
protected class Sensor_LightSensorParserRuleCall_4 extends RuleCallToken {
	
	public Sensor_LightSensorParserRuleCall_4(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getSensorAccess().getLightSensorParserRuleCall_4();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new LightSensor_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getLightSensorAccess().getLightSensorAction_0().getType().getClassifier())
			return null;
		if(checkForRecursion(LightSensor_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// SmokeSensor
protected class Sensor_SmokeSensorParserRuleCall_5 extends RuleCallToken {
	
	public Sensor_SmokeSensorParserRuleCall_5(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getSensorAccess().getSmokeSensorParserRuleCall_5();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new SmokeSensor_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getSmokeSensorAccess().getSmokeSensorAction_0().getType().getClassifier())
			return null;
		if(checkForRecursion(SmokeSensor_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// CO2Sensor
protected class Sensor_CO2SensorParserRuleCall_6 extends RuleCallToken {
	
	public Sensor_CO2SensorParserRuleCall_6(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getSensorAccess().getCO2SensorParserRuleCall_6();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new CO2Sensor_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getCO2SensorAccess().getCO2SensorAction_0().getType().getClassifier())
			return null;
		if(checkForRecursion(CO2Sensor_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// InfraredLightSensor
protected class Sensor_InfraredLightSensorParserRuleCall_7 extends RuleCallToken {
	
	public Sensor_InfraredLightSensorParserRuleCall_7(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getSensorAccess().getInfraredLightSensorParserRuleCall_7();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new InfraredLightSensor_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getInfraredLightSensorAccess().getInfraredLightSensorAction_0().getType().getClassifier())
			return null;
		if(checkForRecursion(InfraredLightSensor_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// HasIntegerValue_Impl
protected class Sensor_HasIntegerValue_ImplParserRuleCall_8 extends RuleCallToken {
	
	public Sensor_HasIntegerValue_ImplParserRuleCall_8(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getSensorAccess().getHasIntegerValue_ImplParserRuleCall_8();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new HasIntegerValue_Impl_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getHasIntegerValue_ImplAccess().getHasIntegerValueAction_0().getType().getClassifier())
			return null;
		if(checkForRecursion(HasIntegerValue_Impl_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// HumiditySensor
protected class Sensor_HumiditySensorParserRuleCall_9 extends RuleCallToken {
	
	public Sensor_HumiditySensorParserRuleCall_9(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getSensorAccess().getHumiditySensorParserRuleCall_9();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new HumiditySensor_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getHumiditySensorAccess().getHumiditySensorAction_0().getType().getClassifier())
			return null;
		if(checkForRecursion(HumiditySensor_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}


/************ end Rule Sensor ****************/



/************ begin Rule Building ****************
 *
 * Building:
 * 	{Building} "building" name=EString "{" (declareSensors+=SensorComponent declareSensors+=SensorComponent*)?
 * 	(declareActuators+=ActuatorComponent declareActuators+=ActuatorComponent*)? ctsSystem=CTS?
 * 	accessControl=AccessControl? calendarSystem=CalendarSystem? meetingScheduleSystem=MeetingScheduleSystem?
 * 	(floors+=Floor floors+=Floor*)? "}";
 *
 **/

// {Building} "building" name=EString "{" (declareSensors+=SensorComponent declareSensors+=SensorComponent*)?
// (declareActuators+=ActuatorComponent declareActuators+=ActuatorComponent*)? ctsSystem=CTS? accessControl=AccessControl?
// calendarSystem=CalendarSystem? meetingScheduleSystem=MeetingScheduleSystem? (floors+=Floor floors+=Floor*)? "}"
protected class Building_Group extends GroupToken {
	
	public Building_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getBuildingAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Building_RightCurlyBracketKeyword_11(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getBuildingAccess().getBuildingAction_0().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// {Building}
protected class Building_BuildingAction_0 extends ActionToken  {

	public Building_BuildingAction_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Action getGrammarElement() {
		return grammarAccess.getBuildingAccess().getBuildingAction_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(!eObjectConsumer.isConsumed()) return null;
		return eObjectConsumer;
	}
}

// "building"
protected class Building_BuildingKeyword_1 extends KeywordToken  {
	
	public Building_BuildingKeyword_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getBuildingAccess().getBuildingKeyword_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Building_BuildingAction_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// name=EString
protected class Building_NameAssignment_2 extends AssignmentToken  {
	
	public Building_NameAssignment_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getBuildingAccess().getNameAssignment_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Building_BuildingKeyword_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("name",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("name");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getBuildingAccess().getNameEStringParserRuleCall_2_0(), value, null)) {
			type = AssignmentType.DATATYPE_RULE_CALL;
			element = grammarAccess.getBuildingAccess().getNameEStringParserRuleCall_2_0();
			return obj;
		}
		return null;
	}

}

// "{"
protected class Building_LeftCurlyBracketKeyword_3 extends KeywordToken  {
	
	public Building_LeftCurlyBracketKeyword_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getBuildingAccess().getLeftCurlyBracketKeyword_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Building_NameAssignment_2(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// (declareSensors+=SensorComponent declareSensors+=SensorComponent*)?
protected class Building_Group_4 extends GroupToken {
	
	public Building_Group_4(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getBuildingAccess().getGroup_4();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Building_DeclareSensorsAssignment_4_1(lastRuleCallOrigin, this, 0, inst);
			case 1: return new Building_DeclareSensorsAssignment_4_0(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}

// declareSensors+=SensorComponent
protected class Building_DeclareSensorsAssignment_4_0 extends AssignmentToken  {
	
	public Building_DeclareSensorsAssignment_4_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getBuildingAccess().getDeclareSensorsAssignment_4_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new SensorComponent_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("declareSensors",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("declareSensors");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getSensorComponentRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getBuildingAccess().getDeclareSensorsSensorComponentParserRuleCall_4_0_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Building_LeftCurlyBracketKeyword_3(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// declareSensors+=SensorComponent*
protected class Building_DeclareSensorsAssignment_4_1 extends AssignmentToken  {
	
	public Building_DeclareSensorsAssignment_4_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getBuildingAccess().getDeclareSensorsAssignment_4_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new SensorComponent_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("declareSensors",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("declareSensors");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getSensorComponentRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getBuildingAccess().getDeclareSensorsSensorComponentParserRuleCall_4_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Building_DeclareSensorsAssignment_4_1(lastRuleCallOrigin, next, actIndex, consumed);
			case 1: return new Building_DeclareSensorsAssignment_4_0(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


// (declareActuators+=ActuatorComponent declareActuators+=ActuatorComponent*)?
protected class Building_Group_5 extends GroupToken {
	
	public Building_Group_5(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getBuildingAccess().getGroup_5();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Building_DeclareActuatorsAssignment_5_1(lastRuleCallOrigin, this, 0, inst);
			case 1: return new Building_DeclareActuatorsAssignment_5_0(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}

// declareActuators+=ActuatorComponent
protected class Building_DeclareActuatorsAssignment_5_0 extends AssignmentToken  {
	
	public Building_DeclareActuatorsAssignment_5_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getBuildingAccess().getDeclareActuatorsAssignment_5_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ActuatorComponent_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("declareActuators",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("declareActuators");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getActuatorComponentRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getBuildingAccess().getDeclareActuatorsActuatorComponentParserRuleCall_5_0_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Building_Group_4(lastRuleCallOrigin, next, actIndex, consumed);
			case 1: return new Building_LeftCurlyBracketKeyword_3(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// declareActuators+=ActuatorComponent*
protected class Building_DeclareActuatorsAssignment_5_1 extends AssignmentToken  {
	
	public Building_DeclareActuatorsAssignment_5_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getBuildingAccess().getDeclareActuatorsAssignment_5_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ActuatorComponent_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("declareActuators",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("declareActuators");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getActuatorComponentRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getBuildingAccess().getDeclareActuatorsActuatorComponentParserRuleCall_5_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Building_DeclareActuatorsAssignment_5_1(lastRuleCallOrigin, next, actIndex, consumed);
			case 1: return new Building_DeclareActuatorsAssignment_5_0(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


// ctsSystem=CTS?
protected class Building_CtsSystemAssignment_6 extends AssignmentToken  {
	
	public Building_CtsSystemAssignment_6(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getBuildingAccess().getCtsSystemAssignment_6();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new CTS_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("ctsSystem",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("ctsSystem");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getCTSRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getBuildingAccess().getCtsSystemCTSParserRuleCall_6_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Building_Group_5(lastRuleCallOrigin, next, actIndex, consumed);
			case 1: return new Building_Group_4(lastRuleCallOrigin, next, actIndex, consumed);
			case 2: return new Building_LeftCurlyBracketKeyword_3(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// accessControl=AccessControl?
protected class Building_AccessControlAssignment_7 extends AssignmentToken  {
	
	public Building_AccessControlAssignment_7(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getBuildingAccess().getAccessControlAssignment_7();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new AccessControl_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("accessControl",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("accessControl");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getAccessControlRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getBuildingAccess().getAccessControlAccessControlParserRuleCall_7_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Building_CtsSystemAssignment_6(lastRuleCallOrigin, next, actIndex, consumed);
			case 1: return new Building_Group_5(lastRuleCallOrigin, next, actIndex, consumed);
			case 2: return new Building_Group_4(lastRuleCallOrigin, next, actIndex, consumed);
			case 3: return new Building_LeftCurlyBracketKeyword_3(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// calendarSystem=CalendarSystem?
protected class Building_CalendarSystemAssignment_8 extends AssignmentToken  {
	
	public Building_CalendarSystemAssignment_8(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getBuildingAccess().getCalendarSystemAssignment_8();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new CalendarSystem_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("calendarSystem",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("calendarSystem");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getCalendarSystemRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getBuildingAccess().getCalendarSystemCalendarSystemParserRuleCall_8_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Building_AccessControlAssignment_7(lastRuleCallOrigin, next, actIndex, consumed);
			case 1: return new Building_CtsSystemAssignment_6(lastRuleCallOrigin, next, actIndex, consumed);
			case 2: return new Building_Group_5(lastRuleCallOrigin, next, actIndex, consumed);
			case 3: return new Building_Group_4(lastRuleCallOrigin, next, actIndex, consumed);
			case 4: return new Building_LeftCurlyBracketKeyword_3(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// meetingScheduleSystem=MeetingScheduleSystem?
protected class Building_MeetingScheduleSystemAssignment_9 extends AssignmentToken  {
	
	public Building_MeetingScheduleSystemAssignment_9(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getBuildingAccess().getMeetingScheduleSystemAssignment_9();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new MeetingScheduleSystem_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("meetingScheduleSystem",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("meetingScheduleSystem");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getMeetingScheduleSystemRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getBuildingAccess().getMeetingScheduleSystemMeetingScheduleSystemParserRuleCall_9_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Building_CalendarSystemAssignment_8(lastRuleCallOrigin, next, actIndex, consumed);
			case 1: return new Building_AccessControlAssignment_7(lastRuleCallOrigin, next, actIndex, consumed);
			case 2: return new Building_CtsSystemAssignment_6(lastRuleCallOrigin, next, actIndex, consumed);
			case 3: return new Building_Group_5(lastRuleCallOrigin, next, actIndex, consumed);
			case 4: return new Building_Group_4(lastRuleCallOrigin, next, actIndex, consumed);
			case 5: return new Building_LeftCurlyBracketKeyword_3(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// (floors+=Floor floors+=Floor*)?
protected class Building_Group_10 extends GroupToken {
	
	public Building_Group_10(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getBuildingAccess().getGroup_10();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Building_FloorsAssignment_10_1(lastRuleCallOrigin, this, 0, inst);
			case 1: return new Building_FloorsAssignment_10_0(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}

// floors+=Floor
protected class Building_FloorsAssignment_10_0 extends AssignmentToken  {
	
	public Building_FloorsAssignment_10_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getBuildingAccess().getFloorsAssignment_10_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Floor_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("floors",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("floors");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getFloorRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getBuildingAccess().getFloorsFloorParserRuleCall_10_0_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Building_MeetingScheduleSystemAssignment_9(lastRuleCallOrigin, next, actIndex, consumed);
			case 1: return new Building_CalendarSystemAssignment_8(lastRuleCallOrigin, next, actIndex, consumed);
			case 2: return new Building_AccessControlAssignment_7(lastRuleCallOrigin, next, actIndex, consumed);
			case 3: return new Building_CtsSystemAssignment_6(lastRuleCallOrigin, next, actIndex, consumed);
			case 4: return new Building_Group_5(lastRuleCallOrigin, next, actIndex, consumed);
			case 5: return new Building_Group_4(lastRuleCallOrigin, next, actIndex, consumed);
			case 6: return new Building_LeftCurlyBracketKeyword_3(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// floors+=Floor*
protected class Building_FloorsAssignment_10_1 extends AssignmentToken  {
	
	public Building_FloorsAssignment_10_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getBuildingAccess().getFloorsAssignment_10_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Floor_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("floors",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("floors");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getFloorRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getBuildingAccess().getFloorsFloorParserRuleCall_10_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Building_FloorsAssignment_10_1(lastRuleCallOrigin, next, actIndex, consumed);
			case 1: return new Building_FloorsAssignment_10_0(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


// "}"
protected class Building_RightCurlyBracketKeyword_11 extends KeywordToken  {
	
	public Building_RightCurlyBracketKeyword_11(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getBuildingAccess().getRightCurlyBracketKeyword_11();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Building_Group_10(lastRuleCallOrigin, this, 0, inst);
			case 1: return new Building_MeetingScheduleSystemAssignment_9(lastRuleCallOrigin, this, 1, inst);
			case 2: return new Building_CalendarSystemAssignment_8(lastRuleCallOrigin, this, 2, inst);
			case 3: return new Building_AccessControlAssignment_7(lastRuleCallOrigin, this, 3, inst);
			case 4: return new Building_CtsSystemAssignment_6(lastRuleCallOrigin, this, 4, inst);
			case 5: return new Building_Group_5(lastRuleCallOrigin, this, 5, inst);
			case 6: return new Building_Group_4(lastRuleCallOrigin, this, 6, inst);
			case 7: return new Building_LeftCurlyBracketKeyword_3(lastRuleCallOrigin, this, 7, inst);
			default: return null;
		}	
	}

}


/************ end Rule Building ****************/


/************ begin Rule Room ****************
 *
 * Room:
 * 	{Room} "room" name=EString ("is a " extends=[Room|EString])? "{" (declareSensor+=SensorComponent
 * 	declareSensor+=SensorComponent*)? (declareActuator+=ActuatorComponent declareActuator+=ActuatorComponent*)? "}";
 *
 **/

// {Room} "room" name=EString ("is a " extends=[Room|EString])? "{" (declareSensor+=SensorComponent
// declareSensor+=SensorComponent*)? (declareActuator+=ActuatorComponent declareActuator+=ActuatorComponent*)? "}"
protected class Room_Group extends GroupToken {
	
	public Room_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getRoomAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Room_RightCurlyBracketKeyword_7(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getRoomAccess().getRoomAction_0().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// {Room}
protected class Room_RoomAction_0 extends ActionToken  {

	public Room_RoomAction_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Action getGrammarElement() {
		return grammarAccess.getRoomAccess().getRoomAction_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(!eObjectConsumer.isConsumed()) return null;
		return eObjectConsumer;
	}
}

// "room"
protected class Room_RoomKeyword_1 extends KeywordToken  {
	
	public Room_RoomKeyword_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getRoomAccess().getRoomKeyword_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Room_RoomAction_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// name=EString
protected class Room_NameAssignment_2 extends AssignmentToken  {
	
	public Room_NameAssignment_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getRoomAccess().getNameAssignment_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Room_RoomKeyword_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("name",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("name");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getRoomAccess().getNameEStringParserRuleCall_2_0(), value, null)) {
			type = AssignmentType.DATATYPE_RULE_CALL;
			element = grammarAccess.getRoomAccess().getNameEStringParserRuleCall_2_0();
			return obj;
		}
		return null;
	}

}

// ("is a " extends=[Room|EString])?
protected class Room_Group_3 extends GroupToken {
	
	public Room_Group_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getRoomAccess().getGroup_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Room_ExtendsAssignment_3_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// "is a "
protected class Room_IsAKeyword_3_0 extends KeywordToken  {
	
	public Room_IsAKeyword_3_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getRoomAccess().getIsAKeyword_3_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Room_NameAssignment_2(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// extends=[Room|EString]
protected class Room_ExtendsAssignment_3_1 extends AssignmentToken  {
	
	public Room_ExtendsAssignment_3_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getRoomAccess().getExtendsAssignment_3_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Room_IsAKeyword_3_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("extends",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("extends");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::CrossReferenceImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getRoomAccess().getExtendsRoomCrossReference_3_1_0().getType().getClassifier())) {
				type = AssignmentType.CROSS_REFERENCE;
				element = grammarAccess.getRoomAccess().getExtendsRoomCrossReference_3_1_0(); 
				return obj;
			}
		}
		return null;
	}

}


// "{"
protected class Room_LeftCurlyBracketKeyword_4 extends KeywordToken  {
	
	public Room_LeftCurlyBracketKeyword_4(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getRoomAccess().getLeftCurlyBracketKeyword_4();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Room_Group_3(lastRuleCallOrigin, this, 0, inst);
			case 1: return new Room_NameAssignment_2(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}

// (declareSensor+=SensorComponent declareSensor+=SensorComponent*)?
protected class Room_Group_5 extends GroupToken {
	
	public Room_Group_5(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getRoomAccess().getGroup_5();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Room_DeclareSensorAssignment_5_1(lastRuleCallOrigin, this, 0, inst);
			case 1: return new Room_DeclareSensorAssignment_5_0(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}

// declareSensor+=SensorComponent
protected class Room_DeclareSensorAssignment_5_0 extends AssignmentToken  {
	
	public Room_DeclareSensorAssignment_5_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getRoomAccess().getDeclareSensorAssignment_5_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new SensorComponent_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("declareSensor",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("declareSensor");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getSensorComponentRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getRoomAccess().getDeclareSensorSensorComponentParserRuleCall_5_0_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Room_LeftCurlyBracketKeyword_4(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// declareSensor+=SensorComponent*
protected class Room_DeclareSensorAssignment_5_1 extends AssignmentToken  {
	
	public Room_DeclareSensorAssignment_5_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getRoomAccess().getDeclareSensorAssignment_5_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new SensorComponent_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("declareSensor",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("declareSensor");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getSensorComponentRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getRoomAccess().getDeclareSensorSensorComponentParserRuleCall_5_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Room_DeclareSensorAssignment_5_1(lastRuleCallOrigin, next, actIndex, consumed);
			case 1: return new Room_DeclareSensorAssignment_5_0(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


// (declareActuator+=ActuatorComponent declareActuator+=ActuatorComponent*)?
protected class Room_Group_6 extends GroupToken {
	
	public Room_Group_6(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getRoomAccess().getGroup_6();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Room_DeclareActuatorAssignment_6_1(lastRuleCallOrigin, this, 0, inst);
			case 1: return new Room_DeclareActuatorAssignment_6_0(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}

// declareActuator+=ActuatorComponent
protected class Room_DeclareActuatorAssignment_6_0 extends AssignmentToken  {
	
	public Room_DeclareActuatorAssignment_6_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getRoomAccess().getDeclareActuatorAssignment_6_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ActuatorComponent_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("declareActuator",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("declareActuator");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getActuatorComponentRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getRoomAccess().getDeclareActuatorActuatorComponentParserRuleCall_6_0_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Room_Group_5(lastRuleCallOrigin, next, actIndex, consumed);
			case 1: return new Room_LeftCurlyBracketKeyword_4(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// declareActuator+=ActuatorComponent*
protected class Room_DeclareActuatorAssignment_6_1 extends AssignmentToken  {
	
	public Room_DeclareActuatorAssignment_6_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getRoomAccess().getDeclareActuatorAssignment_6_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ActuatorComponent_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("declareActuator",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("declareActuator");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getActuatorComponentRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getRoomAccess().getDeclareActuatorActuatorComponentParserRuleCall_6_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Room_DeclareActuatorAssignment_6_1(lastRuleCallOrigin, next, actIndex, consumed);
			case 1: return new Room_DeclareActuatorAssignment_6_0(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


// "}"
protected class Room_RightCurlyBracketKeyword_7 extends KeywordToken  {
	
	public Room_RightCurlyBracketKeyword_7(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getRoomAccess().getRightCurlyBracketKeyword_7();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Room_Group_6(lastRuleCallOrigin, this, 0, inst);
			case 1: return new Room_Group_5(lastRuleCallOrigin, this, 1, inst);
			case 2: return new Room_LeftCurlyBracketKeyword_4(lastRuleCallOrigin, this, 2, inst);
			default: return null;
		}	
	}

}


/************ end Rule Room ****************/


/************ begin Rule State ****************
 *
 * State:
 * 	{State} "State" name=EString ("uses " uses+=Actuator uses+=Actuator*)?;
 *
 **/

// {State} "State" name=EString ("uses " uses+=Actuator uses+=Actuator*)?
protected class State_Group extends GroupToken {
	
	public State_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getStateAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new State_Group_3(lastRuleCallOrigin, this, 0, inst);
			case 1: return new State_NameAssignment_2(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getStateAccess().getStateAction_0().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// {State}
protected class State_StateAction_0 extends ActionToken  {

	public State_StateAction_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Action getGrammarElement() {
		return grammarAccess.getStateAccess().getStateAction_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(!eObjectConsumer.isConsumed()) return null;
		return eObjectConsumer;
	}
}

// "State"
protected class State_StateKeyword_1 extends KeywordToken  {
	
	public State_StateKeyword_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getStateAccess().getStateKeyword_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new State_StateAction_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// name=EString
protected class State_NameAssignment_2 extends AssignmentToken  {
	
	public State_NameAssignment_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getStateAccess().getNameAssignment_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new State_StateKeyword_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("name",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("name");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getStateAccess().getNameEStringParserRuleCall_2_0(), value, null)) {
			type = AssignmentType.DATATYPE_RULE_CALL;
			element = grammarAccess.getStateAccess().getNameEStringParserRuleCall_2_0();
			return obj;
		}
		return null;
	}

}

// ("uses " uses+=Actuator uses+=Actuator*)?
protected class State_Group_3 extends GroupToken {
	
	public State_Group_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getStateAccess().getGroup_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new State_UsesAssignment_3_2(lastRuleCallOrigin, this, 0, inst);
			case 1: return new State_UsesAssignment_3_1(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}

// "uses "
protected class State_UsesKeyword_3_0 extends KeywordToken  {
	
	public State_UsesKeyword_3_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getStateAccess().getUsesKeyword_3_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new State_NameAssignment_2(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// uses+=Actuator
protected class State_UsesAssignment_3_1 extends AssignmentToken  {
	
	public State_UsesAssignment_3_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getStateAccess().getUsesAssignment_3_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Actuator_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("uses",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("uses");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getActuatorRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getStateAccess().getUsesActuatorParserRuleCall_3_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new State_UsesKeyword_3_0(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// uses+=Actuator*
protected class State_UsesAssignment_3_2 extends AssignmentToken  {
	
	public State_UsesAssignment_3_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getStateAccess().getUsesAssignment_3_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Actuator_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("uses",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("uses");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getActuatorRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getStateAccess().getUsesActuatorParserRuleCall_3_2_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new State_UsesAssignment_3_2(lastRuleCallOrigin, next, actIndex, consumed);
			case 1: return new State_UsesAssignment_3_1(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}



/************ end Rule State ****************/


/************ begin Rule CTS ****************
 *
 * CTS:
 * 	{CTS} "CTS" "{" ("temperatureSensors" "{" temperatureSensors+=Sensor ("," temperatureSensors+=Sensor)* "}")?
 * 	("ctsActuators" "{" ctsActuators+=Actuator ("," ctsActuators+=Actuator)* "}")? "}";
 *
 **/

// {CTS} "CTS" "{" ("temperatureSensors" "{" temperatureSensors+=Sensor ("," temperatureSensors+=Sensor)* "}")?
// ("ctsActuators" "{" ctsActuators+=Actuator ("," ctsActuators+=Actuator)* "}")? "}"
protected class CTS_Group extends GroupToken {
	
	public CTS_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getCTSAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new CTS_RightCurlyBracketKeyword_5(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getCTSAccess().getCTSAction_0().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// {CTS}
protected class CTS_CTSAction_0 extends ActionToken  {

	public CTS_CTSAction_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Action getGrammarElement() {
		return grammarAccess.getCTSAccess().getCTSAction_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(!eObjectConsumer.isConsumed()) return null;
		return eObjectConsumer;
	}
}

// "CTS"
protected class CTS_CTSKeyword_1 extends KeywordToken  {
	
	public CTS_CTSKeyword_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getCTSAccess().getCTSKeyword_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new CTS_CTSAction_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// "{"
protected class CTS_LeftCurlyBracketKeyword_2 extends KeywordToken  {
	
	public CTS_LeftCurlyBracketKeyword_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getCTSAccess().getLeftCurlyBracketKeyword_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new CTS_CTSKeyword_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// ("temperatureSensors" "{" temperatureSensors+=Sensor ("," temperatureSensors+=Sensor)* "}")?
protected class CTS_Group_3 extends GroupToken {
	
	public CTS_Group_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getCTSAccess().getGroup_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new CTS_RightCurlyBracketKeyword_3_4(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// "temperatureSensors"
protected class CTS_TemperatureSensorsKeyword_3_0 extends KeywordToken  {
	
	public CTS_TemperatureSensorsKeyword_3_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getCTSAccess().getTemperatureSensorsKeyword_3_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new CTS_LeftCurlyBracketKeyword_2(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// "{"
protected class CTS_LeftCurlyBracketKeyword_3_1 extends KeywordToken  {
	
	public CTS_LeftCurlyBracketKeyword_3_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getCTSAccess().getLeftCurlyBracketKeyword_3_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new CTS_TemperatureSensorsKeyword_3_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// temperatureSensors+=Sensor
protected class CTS_TemperatureSensorsAssignment_3_2 extends AssignmentToken  {
	
	public CTS_TemperatureSensorsAssignment_3_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getCTSAccess().getTemperatureSensorsAssignment_3_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Sensor_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("temperatureSensors",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("temperatureSensors");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getSensorRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getCTSAccess().getTemperatureSensorsSensorParserRuleCall_3_2_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new CTS_LeftCurlyBracketKeyword_3_1(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// ("," temperatureSensors+=Sensor)*
protected class CTS_Group_3_3 extends GroupToken {
	
	public CTS_Group_3_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getCTSAccess().getGroup_3_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new CTS_TemperatureSensorsAssignment_3_3_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// ","
protected class CTS_CommaKeyword_3_3_0 extends KeywordToken  {
	
	public CTS_CommaKeyword_3_3_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getCTSAccess().getCommaKeyword_3_3_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new CTS_Group_3_3(lastRuleCallOrigin, this, 0, inst);
			case 1: return new CTS_TemperatureSensorsAssignment_3_2(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}

// temperatureSensors+=Sensor
protected class CTS_TemperatureSensorsAssignment_3_3_1 extends AssignmentToken  {
	
	public CTS_TemperatureSensorsAssignment_3_3_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getCTSAccess().getTemperatureSensorsAssignment_3_3_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Sensor_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("temperatureSensors",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("temperatureSensors");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getSensorRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getCTSAccess().getTemperatureSensorsSensorParserRuleCall_3_3_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new CTS_CommaKeyword_3_3_0(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


// "}"
protected class CTS_RightCurlyBracketKeyword_3_4 extends KeywordToken  {
	
	public CTS_RightCurlyBracketKeyword_3_4(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getCTSAccess().getRightCurlyBracketKeyword_3_4();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new CTS_Group_3_3(lastRuleCallOrigin, this, 0, inst);
			case 1: return new CTS_TemperatureSensorsAssignment_3_2(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}


// ("ctsActuators" "{" ctsActuators+=Actuator ("," ctsActuators+=Actuator)* "}")?
protected class CTS_Group_4 extends GroupToken {
	
	public CTS_Group_4(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getCTSAccess().getGroup_4();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new CTS_RightCurlyBracketKeyword_4_4(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// "ctsActuators"
protected class CTS_CtsActuatorsKeyword_4_0 extends KeywordToken  {
	
	public CTS_CtsActuatorsKeyword_4_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getCTSAccess().getCtsActuatorsKeyword_4_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new CTS_Group_3(lastRuleCallOrigin, this, 0, inst);
			case 1: return new CTS_LeftCurlyBracketKeyword_2(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}

// "{"
protected class CTS_LeftCurlyBracketKeyword_4_1 extends KeywordToken  {
	
	public CTS_LeftCurlyBracketKeyword_4_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getCTSAccess().getLeftCurlyBracketKeyword_4_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new CTS_CtsActuatorsKeyword_4_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// ctsActuators+=Actuator
protected class CTS_CtsActuatorsAssignment_4_2 extends AssignmentToken  {
	
	public CTS_CtsActuatorsAssignment_4_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getCTSAccess().getCtsActuatorsAssignment_4_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Actuator_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("ctsActuators",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("ctsActuators");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getActuatorRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getCTSAccess().getCtsActuatorsActuatorParserRuleCall_4_2_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new CTS_LeftCurlyBracketKeyword_4_1(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// ("," ctsActuators+=Actuator)*
protected class CTS_Group_4_3 extends GroupToken {
	
	public CTS_Group_4_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getCTSAccess().getGroup_4_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new CTS_CtsActuatorsAssignment_4_3_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// ","
protected class CTS_CommaKeyword_4_3_0 extends KeywordToken  {
	
	public CTS_CommaKeyword_4_3_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getCTSAccess().getCommaKeyword_4_3_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new CTS_Group_4_3(lastRuleCallOrigin, this, 0, inst);
			case 1: return new CTS_CtsActuatorsAssignment_4_2(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}

// ctsActuators+=Actuator
protected class CTS_CtsActuatorsAssignment_4_3_1 extends AssignmentToken  {
	
	public CTS_CtsActuatorsAssignment_4_3_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getCTSAccess().getCtsActuatorsAssignment_4_3_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Actuator_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("ctsActuators",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("ctsActuators");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getActuatorRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getCTSAccess().getCtsActuatorsActuatorParserRuleCall_4_3_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new CTS_CommaKeyword_4_3_0(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


// "}"
protected class CTS_RightCurlyBracketKeyword_4_4 extends KeywordToken  {
	
	public CTS_RightCurlyBracketKeyword_4_4(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getCTSAccess().getRightCurlyBracketKeyword_4_4();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new CTS_Group_4_3(lastRuleCallOrigin, this, 0, inst);
			case 1: return new CTS_CtsActuatorsAssignment_4_2(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}


// "}"
protected class CTS_RightCurlyBracketKeyword_5 extends KeywordToken  {
	
	public CTS_RightCurlyBracketKeyword_5(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getCTSAccess().getRightCurlyBracketKeyword_5();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new CTS_Group_4(lastRuleCallOrigin, this, 0, inst);
			case 1: return new CTS_Group_3(lastRuleCallOrigin, this, 1, inst);
			case 2: return new CTS_LeftCurlyBracketKeyword_2(lastRuleCallOrigin, this, 2, inst);
			default: return null;
		}	
	}

}


/************ end Rule CTS ****************/


/************ begin Rule AccessControl ****************
 *
 * AccessControl:
 * 	{AccessControl} "AccessControl" "{" ("accessControlSensors" "{" accessControlSensors+=Sensor (","
 * 	accessControlSensors+=Sensor)* "}")? ("accessControlDoorLockActuator" "{" accessControlDoorLockActuator+=Actuator (","
 * 	accessControlDoorLockActuator+=Actuator)* "}")? "}";
 *
 **/

// {AccessControl} "AccessControl" "{" ("accessControlSensors" "{" accessControlSensors+=Sensor (","
// accessControlSensors+=Sensor)* "}")? ("accessControlDoorLockActuator" "{" accessControlDoorLockActuator+=Actuator (","
// accessControlDoorLockActuator+=Actuator)* "}")? "}"
protected class AccessControl_Group extends GroupToken {
	
	public AccessControl_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getAccessControlAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new AccessControl_RightCurlyBracketKeyword_5(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getAccessControlAccess().getAccessControlAction_0().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// {AccessControl}
protected class AccessControl_AccessControlAction_0 extends ActionToken  {

	public AccessControl_AccessControlAction_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Action getGrammarElement() {
		return grammarAccess.getAccessControlAccess().getAccessControlAction_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(!eObjectConsumer.isConsumed()) return null;
		return eObjectConsumer;
	}
}

// "AccessControl"
protected class AccessControl_AccessControlKeyword_1 extends KeywordToken  {
	
	public AccessControl_AccessControlKeyword_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getAccessControlAccess().getAccessControlKeyword_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new AccessControl_AccessControlAction_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// "{"
protected class AccessControl_LeftCurlyBracketKeyword_2 extends KeywordToken  {
	
	public AccessControl_LeftCurlyBracketKeyword_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getAccessControlAccess().getLeftCurlyBracketKeyword_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new AccessControl_AccessControlKeyword_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// ("accessControlSensors" "{" accessControlSensors+=Sensor ("," accessControlSensors+=Sensor)* "}")?
protected class AccessControl_Group_3 extends GroupToken {
	
	public AccessControl_Group_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getAccessControlAccess().getGroup_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new AccessControl_RightCurlyBracketKeyword_3_4(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// "accessControlSensors"
protected class AccessControl_AccessControlSensorsKeyword_3_0 extends KeywordToken  {
	
	public AccessControl_AccessControlSensorsKeyword_3_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getAccessControlAccess().getAccessControlSensorsKeyword_3_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new AccessControl_LeftCurlyBracketKeyword_2(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// "{"
protected class AccessControl_LeftCurlyBracketKeyword_3_1 extends KeywordToken  {
	
	public AccessControl_LeftCurlyBracketKeyword_3_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getAccessControlAccess().getLeftCurlyBracketKeyword_3_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new AccessControl_AccessControlSensorsKeyword_3_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// accessControlSensors+=Sensor
protected class AccessControl_AccessControlSensorsAssignment_3_2 extends AssignmentToken  {
	
	public AccessControl_AccessControlSensorsAssignment_3_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getAccessControlAccess().getAccessControlSensorsAssignment_3_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Sensor_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("accessControlSensors",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("accessControlSensors");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getSensorRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getAccessControlAccess().getAccessControlSensorsSensorParserRuleCall_3_2_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new AccessControl_LeftCurlyBracketKeyword_3_1(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// ("," accessControlSensors+=Sensor)*
protected class AccessControl_Group_3_3 extends GroupToken {
	
	public AccessControl_Group_3_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getAccessControlAccess().getGroup_3_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new AccessControl_AccessControlSensorsAssignment_3_3_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// ","
protected class AccessControl_CommaKeyword_3_3_0 extends KeywordToken  {
	
	public AccessControl_CommaKeyword_3_3_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getAccessControlAccess().getCommaKeyword_3_3_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new AccessControl_Group_3_3(lastRuleCallOrigin, this, 0, inst);
			case 1: return new AccessControl_AccessControlSensorsAssignment_3_2(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}

// accessControlSensors+=Sensor
protected class AccessControl_AccessControlSensorsAssignment_3_3_1 extends AssignmentToken  {
	
	public AccessControl_AccessControlSensorsAssignment_3_3_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getAccessControlAccess().getAccessControlSensorsAssignment_3_3_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Sensor_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("accessControlSensors",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("accessControlSensors");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getSensorRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getAccessControlAccess().getAccessControlSensorsSensorParserRuleCall_3_3_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new AccessControl_CommaKeyword_3_3_0(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


// "}"
protected class AccessControl_RightCurlyBracketKeyword_3_4 extends KeywordToken  {
	
	public AccessControl_RightCurlyBracketKeyword_3_4(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getAccessControlAccess().getRightCurlyBracketKeyword_3_4();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new AccessControl_Group_3_3(lastRuleCallOrigin, this, 0, inst);
			case 1: return new AccessControl_AccessControlSensorsAssignment_3_2(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}


// ("accessControlDoorLockActuator" "{" accessControlDoorLockActuator+=Actuator (","
// accessControlDoorLockActuator+=Actuator)* "}")?
protected class AccessControl_Group_4 extends GroupToken {
	
	public AccessControl_Group_4(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getAccessControlAccess().getGroup_4();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new AccessControl_RightCurlyBracketKeyword_4_4(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// "accessControlDoorLockActuator"
protected class AccessControl_AccessControlDoorLockActuatorKeyword_4_0 extends KeywordToken  {
	
	public AccessControl_AccessControlDoorLockActuatorKeyword_4_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getAccessControlAccess().getAccessControlDoorLockActuatorKeyword_4_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new AccessControl_Group_3(lastRuleCallOrigin, this, 0, inst);
			case 1: return new AccessControl_LeftCurlyBracketKeyword_2(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}

// "{"
protected class AccessControl_LeftCurlyBracketKeyword_4_1 extends KeywordToken  {
	
	public AccessControl_LeftCurlyBracketKeyword_4_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getAccessControlAccess().getLeftCurlyBracketKeyword_4_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new AccessControl_AccessControlDoorLockActuatorKeyword_4_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// accessControlDoorLockActuator+=Actuator
protected class AccessControl_AccessControlDoorLockActuatorAssignment_4_2 extends AssignmentToken  {
	
	public AccessControl_AccessControlDoorLockActuatorAssignment_4_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getAccessControlAccess().getAccessControlDoorLockActuatorAssignment_4_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Actuator_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("accessControlDoorLockActuator",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("accessControlDoorLockActuator");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getActuatorRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getAccessControlAccess().getAccessControlDoorLockActuatorActuatorParserRuleCall_4_2_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new AccessControl_LeftCurlyBracketKeyword_4_1(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// ("," accessControlDoorLockActuator+=Actuator)*
protected class AccessControl_Group_4_3 extends GroupToken {
	
	public AccessControl_Group_4_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getAccessControlAccess().getGroup_4_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new AccessControl_AccessControlDoorLockActuatorAssignment_4_3_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// ","
protected class AccessControl_CommaKeyword_4_3_0 extends KeywordToken  {
	
	public AccessControl_CommaKeyword_4_3_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getAccessControlAccess().getCommaKeyword_4_3_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new AccessControl_Group_4_3(lastRuleCallOrigin, this, 0, inst);
			case 1: return new AccessControl_AccessControlDoorLockActuatorAssignment_4_2(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}

// accessControlDoorLockActuator+=Actuator
protected class AccessControl_AccessControlDoorLockActuatorAssignment_4_3_1 extends AssignmentToken  {
	
	public AccessControl_AccessControlDoorLockActuatorAssignment_4_3_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getAccessControlAccess().getAccessControlDoorLockActuatorAssignment_4_3_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Actuator_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("accessControlDoorLockActuator",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("accessControlDoorLockActuator");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getActuatorRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getAccessControlAccess().getAccessControlDoorLockActuatorActuatorParserRuleCall_4_3_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new AccessControl_CommaKeyword_4_3_0(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


// "}"
protected class AccessControl_RightCurlyBracketKeyword_4_4 extends KeywordToken  {
	
	public AccessControl_RightCurlyBracketKeyword_4_4(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getAccessControlAccess().getRightCurlyBracketKeyword_4_4();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new AccessControl_Group_4_3(lastRuleCallOrigin, this, 0, inst);
			case 1: return new AccessControl_AccessControlDoorLockActuatorAssignment_4_2(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}


// "}"
protected class AccessControl_RightCurlyBracketKeyword_5 extends KeywordToken  {
	
	public AccessControl_RightCurlyBracketKeyword_5(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getAccessControlAccess().getRightCurlyBracketKeyword_5();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new AccessControl_Group_4(lastRuleCallOrigin, this, 0, inst);
			case 1: return new AccessControl_Group_3(lastRuleCallOrigin, this, 1, inst);
			case 2: return new AccessControl_LeftCurlyBracketKeyword_2(lastRuleCallOrigin, this, 2, inst);
			default: return null;
		}	
	}

}


/************ end Rule AccessControl ****************/


/************ begin Rule CalendarSystem ****************
 *
 * CalendarSystem:
 * 	{CalendarSystem} "CalendarSystem";
 *
 **/

// {CalendarSystem} "CalendarSystem"
protected class CalendarSystem_Group extends GroupToken {
	
	public CalendarSystem_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getCalendarSystemAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new CalendarSystem_CalendarSystemKeyword_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getCalendarSystemAccess().getCalendarSystemAction_0().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// {CalendarSystem}
protected class CalendarSystem_CalendarSystemAction_0 extends ActionToken  {

	public CalendarSystem_CalendarSystemAction_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Action getGrammarElement() {
		return grammarAccess.getCalendarSystemAccess().getCalendarSystemAction_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(!eObjectConsumer.isConsumed()) return null;
		return eObjectConsumer;
	}
}

// "CalendarSystem"
protected class CalendarSystem_CalendarSystemKeyword_1 extends KeywordToken  {
	
	public CalendarSystem_CalendarSystemKeyword_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getCalendarSystemAccess().getCalendarSystemKeyword_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new CalendarSystem_CalendarSystemAction_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}


/************ end Rule CalendarSystem ****************/


/************ begin Rule MeetingScheduleSystem ****************
 *
 * MeetingScheduleSystem:
 * 	{MeetingScheduleSystem} "MeetingScheduleSystem";
 *
 **/

// {MeetingScheduleSystem} "MeetingScheduleSystem"
protected class MeetingScheduleSystem_Group extends GroupToken {
	
	public MeetingScheduleSystem_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getMeetingScheduleSystemAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new MeetingScheduleSystem_MeetingScheduleSystemKeyword_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getMeetingScheduleSystemAccess().getMeetingScheduleSystemAction_0().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// {MeetingScheduleSystem}
protected class MeetingScheduleSystem_MeetingScheduleSystemAction_0 extends ActionToken  {

	public MeetingScheduleSystem_MeetingScheduleSystemAction_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Action getGrammarElement() {
		return grammarAccess.getMeetingScheduleSystemAccess().getMeetingScheduleSystemAction_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(!eObjectConsumer.isConsumed()) return null;
		return eObjectConsumer;
	}
}

// "MeetingScheduleSystem"
protected class MeetingScheduleSystem_MeetingScheduleSystemKeyword_1 extends KeywordToken  {
	
	public MeetingScheduleSystem_MeetingScheduleSystemKeyword_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getMeetingScheduleSystemAccess().getMeetingScheduleSystemKeyword_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new MeetingScheduleSystem_MeetingScheduleSystemAction_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}


/************ end Rule MeetingScheduleSystem ****************/


/************ begin Rule Floor ****************
 *
 * Floor:
 * 	{Floor} "floor" name=EString "{" (declareSensors+=SensorComponent declareSensors+=SensorComponent*)?
 * 	(declareActuators+=ActuatorComponent declareActuators+=ActuatorComponent*)? (rooms+=Room rooms+=Room*)? "}";
 *
 **/

// {Floor} "floor" name=EString "{" (declareSensors+=SensorComponent declareSensors+=SensorComponent*)?
// (declareActuators+=ActuatorComponent declareActuators+=ActuatorComponent*)? (rooms+=Room rooms+=Room*)? "}"
protected class Floor_Group extends GroupToken {
	
	public Floor_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getFloorAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Floor_RightCurlyBracketKeyword_7(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getFloorAccess().getFloorAction_0().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// {Floor}
protected class Floor_FloorAction_0 extends ActionToken  {

	public Floor_FloorAction_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Action getGrammarElement() {
		return grammarAccess.getFloorAccess().getFloorAction_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(!eObjectConsumer.isConsumed()) return null;
		return eObjectConsumer;
	}
}

// "floor"
protected class Floor_FloorKeyword_1 extends KeywordToken  {
	
	public Floor_FloorKeyword_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getFloorAccess().getFloorKeyword_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Floor_FloorAction_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// name=EString
protected class Floor_NameAssignment_2 extends AssignmentToken  {
	
	public Floor_NameAssignment_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getFloorAccess().getNameAssignment_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Floor_FloorKeyword_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("name",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("name");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getFloorAccess().getNameEStringParserRuleCall_2_0(), value, null)) {
			type = AssignmentType.DATATYPE_RULE_CALL;
			element = grammarAccess.getFloorAccess().getNameEStringParserRuleCall_2_0();
			return obj;
		}
		return null;
	}

}

// "{"
protected class Floor_LeftCurlyBracketKeyword_3 extends KeywordToken  {
	
	public Floor_LeftCurlyBracketKeyword_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getFloorAccess().getLeftCurlyBracketKeyword_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Floor_NameAssignment_2(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// (declareSensors+=SensorComponent declareSensors+=SensorComponent*)?
protected class Floor_Group_4 extends GroupToken {
	
	public Floor_Group_4(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getFloorAccess().getGroup_4();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Floor_DeclareSensorsAssignment_4_1(lastRuleCallOrigin, this, 0, inst);
			case 1: return new Floor_DeclareSensorsAssignment_4_0(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}

// declareSensors+=SensorComponent
protected class Floor_DeclareSensorsAssignment_4_0 extends AssignmentToken  {
	
	public Floor_DeclareSensorsAssignment_4_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getFloorAccess().getDeclareSensorsAssignment_4_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new SensorComponent_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("declareSensors",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("declareSensors");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getSensorComponentRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getFloorAccess().getDeclareSensorsSensorComponentParserRuleCall_4_0_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Floor_LeftCurlyBracketKeyword_3(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// declareSensors+=SensorComponent*
protected class Floor_DeclareSensorsAssignment_4_1 extends AssignmentToken  {
	
	public Floor_DeclareSensorsAssignment_4_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getFloorAccess().getDeclareSensorsAssignment_4_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new SensorComponent_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("declareSensors",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("declareSensors");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getSensorComponentRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getFloorAccess().getDeclareSensorsSensorComponentParserRuleCall_4_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Floor_DeclareSensorsAssignment_4_1(lastRuleCallOrigin, next, actIndex, consumed);
			case 1: return new Floor_DeclareSensorsAssignment_4_0(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


// (declareActuators+=ActuatorComponent declareActuators+=ActuatorComponent*)?
protected class Floor_Group_5 extends GroupToken {
	
	public Floor_Group_5(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getFloorAccess().getGroup_5();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Floor_DeclareActuatorsAssignment_5_1(lastRuleCallOrigin, this, 0, inst);
			case 1: return new Floor_DeclareActuatorsAssignment_5_0(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}

// declareActuators+=ActuatorComponent
protected class Floor_DeclareActuatorsAssignment_5_0 extends AssignmentToken  {
	
	public Floor_DeclareActuatorsAssignment_5_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getFloorAccess().getDeclareActuatorsAssignment_5_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ActuatorComponent_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("declareActuators",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("declareActuators");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getActuatorComponentRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getFloorAccess().getDeclareActuatorsActuatorComponentParserRuleCall_5_0_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Floor_Group_4(lastRuleCallOrigin, next, actIndex, consumed);
			case 1: return new Floor_LeftCurlyBracketKeyword_3(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// declareActuators+=ActuatorComponent*
protected class Floor_DeclareActuatorsAssignment_5_1 extends AssignmentToken  {
	
	public Floor_DeclareActuatorsAssignment_5_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getFloorAccess().getDeclareActuatorsAssignment_5_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ActuatorComponent_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("declareActuators",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("declareActuators");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getActuatorComponentRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getFloorAccess().getDeclareActuatorsActuatorComponentParserRuleCall_5_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Floor_DeclareActuatorsAssignment_5_1(lastRuleCallOrigin, next, actIndex, consumed);
			case 1: return new Floor_DeclareActuatorsAssignment_5_0(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


// (rooms+=Room rooms+=Room*)?
protected class Floor_Group_6 extends GroupToken {
	
	public Floor_Group_6(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getFloorAccess().getGroup_6();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Floor_RoomsAssignment_6_1(lastRuleCallOrigin, this, 0, inst);
			case 1: return new Floor_RoomsAssignment_6_0(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}

// rooms+=Room
protected class Floor_RoomsAssignment_6_0 extends AssignmentToken  {
	
	public Floor_RoomsAssignment_6_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getFloorAccess().getRoomsAssignment_6_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Room_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("rooms",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("rooms");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getRoomRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getFloorAccess().getRoomsRoomParserRuleCall_6_0_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Floor_Group_5(lastRuleCallOrigin, next, actIndex, consumed);
			case 1: return new Floor_Group_4(lastRuleCallOrigin, next, actIndex, consumed);
			case 2: return new Floor_LeftCurlyBracketKeyword_3(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// rooms+=Room*
protected class Floor_RoomsAssignment_6_1 extends AssignmentToken  {
	
	public Floor_RoomsAssignment_6_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getFloorAccess().getRoomsAssignment_6_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Room_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("rooms",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("rooms");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getRoomRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getFloorAccess().getRoomsRoomParserRuleCall_6_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Floor_RoomsAssignment_6_1(lastRuleCallOrigin, next, actIndex, consumed);
			case 1: return new Floor_RoomsAssignment_6_0(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


// "}"
protected class Floor_RightCurlyBracketKeyword_7 extends KeywordToken  {
	
	public Floor_RightCurlyBracketKeyword_7(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getFloorAccess().getRightCurlyBracketKeyword_7();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Floor_Group_6(lastRuleCallOrigin, this, 0, inst);
			case 1: return new Floor_Group_5(lastRuleCallOrigin, this, 1, inst);
			case 2: return new Floor_Group_4(lastRuleCallOrigin, this, 2, inst);
			case 3: return new Floor_LeftCurlyBracketKeyword_3(lastRuleCallOrigin, this, 3, inst);
			default: return null;
		}	
	}

}


/************ end Rule Floor ****************/


/************ begin Rule SensorComponent ****************
 *
 * SensorComponent:
 * 	{SensorComponent} "sensor " name=EString ("is a " sensors+=Sensor sensors+=Sensor*)?;
 *
 **/

// {SensorComponent} "sensor " name=EString ("is a " sensors+=Sensor sensors+=Sensor*)?
protected class SensorComponent_Group extends GroupToken {
	
	public SensorComponent_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getSensorComponentAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new SensorComponent_Group_3(lastRuleCallOrigin, this, 0, inst);
			case 1: return new SensorComponent_NameAssignment_2(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getSensorComponentAccess().getSensorComponentAction_0().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// {SensorComponent}
protected class SensorComponent_SensorComponentAction_0 extends ActionToken  {

	public SensorComponent_SensorComponentAction_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Action getGrammarElement() {
		return grammarAccess.getSensorComponentAccess().getSensorComponentAction_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(!eObjectConsumer.isConsumed()) return null;
		return eObjectConsumer;
	}
}

// "sensor "
protected class SensorComponent_SensorKeyword_1 extends KeywordToken  {
	
	public SensorComponent_SensorKeyword_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getSensorComponentAccess().getSensorKeyword_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new SensorComponent_SensorComponentAction_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// name=EString
protected class SensorComponent_NameAssignment_2 extends AssignmentToken  {
	
	public SensorComponent_NameAssignment_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getSensorComponentAccess().getNameAssignment_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new SensorComponent_SensorKeyword_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("name",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("name");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getSensorComponentAccess().getNameEStringParserRuleCall_2_0(), value, null)) {
			type = AssignmentType.DATATYPE_RULE_CALL;
			element = grammarAccess.getSensorComponentAccess().getNameEStringParserRuleCall_2_0();
			return obj;
		}
		return null;
	}

}

// ("is a " sensors+=Sensor sensors+=Sensor*)?
protected class SensorComponent_Group_3 extends GroupToken {
	
	public SensorComponent_Group_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getSensorComponentAccess().getGroup_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new SensorComponent_SensorsAssignment_3_2(lastRuleCallOrigin, this, 0, inst);
			case 1: return new SensorComponent_SensorsAssignment_3_1(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}

// "is a "
protected class SensorComponent_IsAKeyword_3_0 extends KeywordToken  {
	
	public SensorComponent_IsAKeyword_3_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getSensorComponentAccess().getIsAKeyword_3_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new SensorComponent_NameAssignment_2(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// sensors+=Sensor
protected class SensorComponent_SensorsAssignment_3_1 extends AssignmentToken  {
	
	public SensorComponent_SensorsAssignment_3_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getSensorComponentAccess().getSensorsAssignment_3_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Sensor_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("sensors",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("sensors");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getSensorRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getSensorComponentAccess().getSensorsSensorParserRuleCall_3_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new SensorComponent_IsAKeyword_3_0(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// sensors+=Sensor*
protected class SensorComponent_SensorsAssignment_3_2 extends AssignmentToken  {
	
	public SensorComponent_SensorsAssignment_3_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getSensorComponentAccess().getSensorsAssignment_3_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Sensor_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("sensors",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("sensors");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getSensorRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getSensorComponentAccess().getSensorsSensorParserRuleCall_3_2_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new SensorComponent_SensorsAssignment_3_2(lastRuleCallOrigin, next, actIndex, consumed);
			case 1: return new SensorComponent_SensorsAssignment_3_1(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}



/************ end Rule SensorComponent ****************/


/************ begin Rule ActuatorComponent ****************
 *
 * ActuatorComponent:
 * 	{ActuatorComponent} "actuator" name=EString ("is a " actuators+=Actuator actuators+=Actuator*)?;
 *
 **/

// {ActuatorComponent} "actuator" name=EString ("is a " actuators+=Actuator actuators+=Actuator*)?
protected class ActuatorComponent_Group extends GroupToken {
	
	public ActuatorComponent_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getActuatorComponentAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ActuatorComponent_Group_3(lastRuleCallOrigin, this, 0, inst);
			case 1: return new ActuatorComponent_NameAssignment_2(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getActuatorComponentAccess().getActuatorComponentAction_0().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// {ActuatorComponent}
protected class ActuatorComponent_ActuatorComponentAction_0 extends ActionToken  {

	public ActuatorComponent_ActuatorComponentAction_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Action getGrammarElement() {
		return grammarAccess.getActuatorComponentAccess().getActuatorComponentAction_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(!eObjectConsumer.isConsumed()) return null;
		return eObjectConsumer;
	}
}

// "actuator"
protected class ActuatorComponent_ActuatorKeyword_1 extends KeywordToken  {
	
	public ActuatorComponent_ActuatorKeyword_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getActuatorComponentAccess().getActuatorKeyword_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ActuatorComponent_ActuatorComponentAction_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// name=EString
protected class ActuatorComponent_NameAssignment_2 extends AssignmentToken  {
	
	public ActuatorComponent_NameAssignment_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getActuatorComponentAccess().getNameAssignment_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ActuatorComponent_ActuatorKeyword_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("name",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("name");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getActuatorComponentAccess().getNameEStringParserRuleCall_2_0(), value, null)) {
			type = AssignmentType.DATATYPE_RULE_CALL;
			element = grammarAccess.getActuatorComponentAccess().getNameEStringParserRuleCall_2_0();
			return obj;
		}
		return null;
	}

}

// ("is a " actuators+=Actuator actuators+=Actuator*)?
protected class ActuatorComponent_Group_3 extends GroupToken {
	
	public ActuatorComponent_Group_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getActuatorComponentAccess().getGroup_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ActuatorComponent_ActuatorsAssignment_3_2(lastRuleCallOrigin, this, 0, inst);
			case 1: return new ActuatorComponent_ActuatorsAssignment_3_1(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}

// "is a "
protected class ActuatorComponent_IsAKeyword_3_0 extends KeywordToken  {
	
	public ActuatorComponent_IsAKeyword_3_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getActuatorComponentAccess().getIsAKeyword_3_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ActuatorComponent_NameAssignment_2(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// actuators+=Actuator
protected class ActuatorComponent_ActuatorsAssignment_3_1 extends AssignmentToken  {
	
	public ActuatorComponent_ActuatorsAssignment_3_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getActuatorComponentAccess().getActuatorsAssignment_3_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Actuator_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("actuators",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("actuators");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getActuatorRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getActuatorComponentAccess().getActuatorsActuatorParserRuleCall_3_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new ActuatorComponent_IsAKeyword_3_0(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// actuators+=Actuator*
protected class ActuatorComponent_ActuatorsAssignment_3_2 extends AssignmentToken  {
	
	public ActuatorComponent_ActuatorsAssignment_3_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getActuatorComponentAccess().getActuatorsAssignment_3_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Actuator_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("actuators",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("actuators");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getActuatorRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getActuatorComponentAccess().getActuatorsActuatorParserRuleCall_3_2_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new ActuatorComponent_ActuatorsAssignment_3_2(lastRuleCallOrigin, next, actIndex, consumed);
			case 1: return new ActuatorComponent_ActuatorsAssignment_3_1(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}



/************ end Rule ActuatorComponent ****************/


/************ begin Rule MotionSensor ****************
 *
 * MotionSensor:
 * 	{MotionSensor} "MotionSensor" ("{" "valueState" "=" valueState=EInt "}")?;
 *
 **/

// {MotionSensor} "MotionSensor" ("{" "valueState" "=" valueState=EInt "}")?
protected class MotionSensor_Group extends GroupToken {
	
	public MotionSensor_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getMotionSensorAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new MotionSensor_Group_2(lastRuleCallOrigin, this, 0, inst);
			case 1: return new MotionSensor_MotionSensorKeyword_1(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getMotionSensorAccess().getMotionSensorAction_0().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// {MotionSensor}
protected class MotionSensor_MotionSensorAction_0 extends ActionToken  {

	public MotionSensor_MotionSensorAction_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Action getGrammarElement() {
		return grammarAccess.getMotionSensorAccess().getMotionSensorAction_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(!eObjectConsumer.isConsumed()) return null;
		return eObjectConsumer;
	}
}

// "MotionSensor"
protected class MotionSensor_MotionSensorKeyword_1 extends KeywordToken  {
	
	public MotionSensor_MotionSensorKeyword_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getMotionSensorAccess().getMotionSensorKeyword_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new MotionSensor_MotionSensorAction_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// ("{" "valueState" "=" valueState=EInt "}")?
protected class MotionSensor_Group_2 extends GroupToken {
	
	public MotionSensor_Group_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getMotionSensorAccess().getGroup_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new MotionSensor_RightCurlyBracketKeyword_2_4(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// "{"
protected class MotionSensor_LeftCurlyBracketKeyword_2_0 extends KeywordToken  {
	
	public MotionSensor_LeftCurlyBracketKeyword_2_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getMotionSensorAccess().getLeftCurlyBracketKeyword_2_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new MotionSensor_MotionSensorKeyword_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// "valueState"
protected class MotionSensor_ValueStateKeyword_2_1 extends KeywordToken  {
	
	public MotionSensor_ValueStateKeyword_2_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getMotionSensorAccess().getValueStateKeyword_2_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new MotionSensor_LeftCurlyBracketKeyword_2_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// "="
protected class MotionSensor_EqualsSignKeyword_2_2 extends KeywordToken  {
	
	public MotionSensor_EqualsSignKeyword_2_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getMotionSensorAccess().getEqualsSignKeyword_2_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new MotionSensor_ValueStateKeyword_2_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// valueState=EInt
protected class MotionSensor_ValueStateAssignment_2_3 extends AssignmentToken  {
	
	public MotionSensor_ValueStateAssignment_2_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getMotionSensorAccess().getValueStateAssignment_2_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new MotionSensor_EqualsSignKeyword_2_2(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("valueState",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("valueState");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getMotionSensorAccess().getValueStateEIntParserRuleCall_2_3_0(), value, null)) {
			type = AssignmentType.DATATYPE_RULE_CALL;
			element = grammarAccess.getMotionSensorAccess().getValueStateEIntParserRuleCall_2_3_0();
			return obj;
		}
		return null;
	}

}

// "}"
protected class MotionSensor_RightCurlyBracketKeyword_2_4 extends KeywordToken  {
	
	public MotionSensor_RightCurlyBracketKeyword_2_4(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getMotionSensorAccess().getRightCurlyBracketKeyword_2_4();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new MotionSensor_ValueStateAssignment_2_3(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}



/************ end Rule MotionSensor ****************/


/************ begin Rule TemperatureSensor ****************
 *
 * TemperatureSensor:
 * 	{TemperatureSensor} "TemperatureSensor" ("{" "valueState" "=" valueState=EInt "}")?;
 *
 **/

// {TemperatureSensor} "TemperatureSensor" ("{" "valueState" "=" valueState=EInt "}")?
protected class TemperatureSensor_Group extends GroupToken {
	
	public TemperatureSensor_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getTemperatureSensorAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new TemperatureSensor_Group_2(lastRuleCallOrigin, this, 0, inst);
			case 1: return new TemperatureSensor_TemperatureSensorKeyword_1(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getTemperatureSensorAccess().getTemperatureSensorAction_0().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// {TemperatureSensor}
protected class TemperatureSensor_TemperatureSensorAction_0 extends ActionToken  {

	public TemperatureSensor_TemperatureSensorAction_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Action getGrammarElement() {
		return grammarAccess.getTemperatureSensorAccess().getTemperatureSensorAction_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(!eObjectConsumer.isConsumed()) return null;
		return eObjectConsumer;
	}
}

// "TemperatureSensor"
protected class TemperatureSensor_TemperatureSensorKeyword_1 extends KeywordToken  {
	
	public TemperatureSensor_TemperatureSensorKeyword_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getTemperatureSensorAccess().getTemperatureSensorKeyword_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new TemperatureSensor_TemperatureSensorAction_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// ("{" "valueState" "=" valueState=EInt "}")?
protected class TemperatureSensor_Group_2 extends GroupToken {
	
	public TemperatureSensor_Group_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getTemperatureSensorAccess().getGroup_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new TemperatureSensor_RightCurlyBracketKeyword_2_4(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// "{"
protected class TemperatureSensor_LeftCurlyBracketKeyword_2_0 extends KeywordToken  {
	
	public TemperatureSensor_LeftCurlyBracketKeyword_2_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getTemperatureSensorAccess().getLeftCurlyBracketKeyword_2_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new TemperatureSensor_TemperatureSensorKeyword_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// "valueState"
protected class TemperatureSensor_ValueStateKeyword_2_1 extends KeywordToken  {
	
	public TemperatureSensor_ValueStateKeyword_2_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getTemperatureSensorAccess().getValueStateKeyword_2_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new TemperatureSensor_LeftCurlyBracketKeyword_2_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// "="
protected class TemperatureSensor_EqualsSignKeyword_2_2 extends KeywordToken  {
	
	public TemperatureSensor_EqualsSignKeyword_2_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getTemperatureSensorAccess().getEqualsSignKeyword_2_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new TemperatureSensor_ValueStateKeyword_2_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// valueState=EInt
protected class TemperatureSensor_ValueStateAssignment_2_3 extends AssignmentToken  {
	
	public TemperatureSensor_ValueStateAssignment_2_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getTemperatureSensorAccess().getValueStateAssignment_2_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new TemperatureSensor_EqualsSignKeyword_2_2(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("valueState",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("valueState");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getTemperatureSensorAccess().getValueStateEIntParserRuleCall_2_3_0(), value, null)) {
			type = AssignmentType.DATATYPE_RULE_CALL;
			element = grammarAccess.getTemperatureSensorAccess().getValueStateEIntParserRuleCall_2_3_0();
			return obj;
		}
		return null;
	}

}

// "}"
protected class TemperatureSensor_RightCurlyBracketKeyword_2_4 extends KeywordToken  {
	
	public TemperatureSensor_RightCurlyBracketKeyword_2_4(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getTemperatureSensorAccess().getRightCurlyBracketKeyword_2_4();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new TemperatureSensor_ValueStateAssignment_2_3(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}



/************ end Rule TemperatureSensor ****************/


/************ begin Rule PressureSensor ****************
 *
 * PressureSensor:
 * 	{PressureSensor} "PressureSensor" ("{" "valueState" "=" valueState=EInt "}")?;
 *
 **/

// {PressureSensor} "PressureSensor" ("{" "valueState" "=" valueState=EInt "}")?
protected class PressureSensor_Group extends GroupToken {
	
	public PressureSensor_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getPressureSensorAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new PressureSensor_Group_2(lastRuleCallOrigin, this, 0, inst);
			case 1: return new PressureSensor_PressureSensorKeyword_1(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getPressureSensorAccess().getPressureSensorAction_0().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// {PressureSensor}
protected class PressureSensor_PressureSensorAction_0 extends ActionToken  {

	public PressureSensor_PressureSensorAction_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Action getGrammarElement() {
		return grammarAccess.getPressureSensorAccess().getPressureSensorAction_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(!eObjectConsumer.isConsumed()) return null;
		return eObjectConsumer;
	}
}

// "PressureSensor"
protected class PressureSensor_PressureSensorKeyword_1 extends KeywordToken  {
	
	public PressureSensor_PressureSensorKeyword_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getPressureSensorAccess().getPressureSensorKeyword_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new PressureSensor_PressureSensorAction_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// ("{" "valueState" "=" valueState=EInt "}")?
protected class PressureSensor_Group_2 extends GroupToken {
	
	public PressureSensor_Group_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getPressureSensorAccess().getGroup_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new PressureSensor_RightCurlyBracketKeyword_2_4(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// "{"
protected class PressureSensor_LeftCurlyBracketKeyword_2_0 extends KeywordToken  {
	
	public PressureSensor_LeftCurlyBracketKeyword_2_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getPressureSensorAccess().getLeftCurlyBracketKeyword_2_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new PressureSensor_PressureSensorKeyword_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// "valueState"
protected class PressureSensor_ValueStateKeyword_2_1 extends KeywordToken  {
	
	public PressureSensor_ValueStateKeyword_2_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getPressureSensorAccess().getValueStateKeyword_2_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new PressureSensor_LeftCurlyBracketKeyword_2_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// "="
protected class PressureSensor_EqualsSignKeyword_2_2 extends KeywordToken  {
	
	public PressureSensor_EqualsSignKeyword_2_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getPressureSensorAccess().getEqualsSignKeyword_2_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new PressureSensor_ValueStateKeyword_2_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// valueState=EInt
protected class PressureSensor_ValueStateAssignment_2_3 extends AssignmentToken  {
	
	public PressureSensor_ValueStateAssignment_2_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getPressureSensorAccess().getValueStateAssignment_2_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new PressureSensor_EqualsSignKeyword_2_2(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("valueState",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("valueState");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getPressureSensorAccess().getValueStateEIntParserRuleCall_2_3_0(), value, null)) {
			type = AssignmentType.DATATYPE_RULE_CALL;
			element = grammarAccess.getPressureSensorAccess().getValueStateEIntParserRuleCall_2_3_0();
			return obj;
		}
		return null;
	}

}

// "}"
protected class PressureSensor_RightCurlyBracketKeyword_2_4 extends KeywordToken  {
	
	public PressureSensor_RightCurlyBracketKeyword_2_4(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getPressureSensorAccess().getRightCurlyBracketKeyword_2_4();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new PressureSensor_ValueStateAssignment_2_3(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}



/************ end Rule PressureSensor ****************/


/************ begin Rule TouchSensor ****************
 *
 * TouchSensor:
 * 	{TouchSensor} "TouchSensor" ("{" "valueState" "=" valueState=EInt "}")?;
 *
 **/

// {TouchSensor} "TouchSensor" ("{" "valueState" "=" valueState=EInt "}")?
protected class TouchSensor_Group extends GroupToken {
	
	public TouchSensor_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getTouchSensorAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new TouchSensor_Group_2(lastRuleCallOrigin, this, 0, inst);
			case 1: return new TouchSensor_TouchSensorKeyword_1(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getTouchSensorAccess().getTouchSensorAction_0().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// {TouchSensor}
protected class TouchSensor_TouchSensorAction_0 extends ActionToken  {

	public TouchSensor_TouchSensorAction_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Action getGrammarElement() {
		return grammarAccess.getTouchSensorAccess().getTouchSensorAction_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(!eObjectConsumer.isConsumed()) return null;
		return eObjectConsumer;
	}
}

// "TouchSensor"
protected class TouchSensor_TouchSensorKeyword_1 extends KeywordToken  {
	
	public TouchSensor_TouchSensorKeyword_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getTouchSensorAccess().getTouchSensorKeyword_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new TouchSensor_TouchSensorAction_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// ("{" "valueState" "=" valueState=EInt "}")?
protected class TouchSensor_Group_2 extends GroupToken {
	
	public TouchSensor_Group_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getTouchSensorAccess().getGroup_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new TouchSensor_RightCurlyBracketKeyword_2_4(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// "{"
protected class TouchSensor_LeftCurlyBracketKeyword_2_0 extends KeywordToken  {
	
	public TouchSensor_LeftCurlyBracketKeyword_2_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getTouchSensorAccess().getLeftCurlyBracketKeyword_2_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new TouchSensor_TouchSensorKeyword_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// "valueState"
protected class TouchSensor_ValueStateKeyword_2_1 extends KeywordToken  {
	
	public TouchSensor_ValueStateKeyword_2_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getTouchSensorAccess().getValueStateKeyword_2_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new TouchSensor_LeftCurlyBracketKeyword_2_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// "="
protected class TouchSensor_EqualsSignKeyword_2_2 extends KeywordToken  {
	
	public TouchSensor_EqualsSignKeyword_2_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getTouchSensorAccess().getEqualsSignKeyword_2_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new TouchSensor_ValueStateKeyword_2_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// valueState=EInt
protected class TouchSensor_ValueStateAssignment_2_3 extends AssignmentToken  {
	
	public TouchSensor_ValueStateAssignment_2_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getTouchSensorAccess().getValueStateAssignment_2_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new TouchSensor_EqualsSignKeyword_2_2(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("valueState",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("valueState");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getTouchSensorAccess().getValueStateEIntParserRuleCall_2_3_0(), value, null)) {
			type = AssignmentType.DATATYPE_RULE_CALL;
			element = grammarAccess.getTouchSensorAccess().getValueStateEIntParserRuleCall_2_3_0();
			return obj;
		}
		return null;
	}

}

// "}"
protected class TouchSensor_RightCurlyBracketKeyword_2_4 extends KeywordToken  {
	
	public TouchSensor_RightCurlyBracketKeyword_2_4(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getTouchSensorAccess().getRightCurlyBracketKeyword_2_4();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new TouchSensor_ValueStateAssignment_2_3(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}



/************ end Rule TouchSensor ****************/


/************ begin Rule LightSensor ****************
 *
 * LightSensor:
 * 	{LightSensor} "LightSensor" ("{" "valueState" "=" valueState=EInt "}")?;
 *
 **/

// {LightSensor} "LightSensor" ("{" "valueState" "=" valueState=EInt "}")?
protected class LightSensor_Group extends GroupToken {
	
	public LightSensor_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getLightSensorAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new LightSensor_Group_2(lastRuleCallOrigin, this, 0, inst);
			case 1: return new LightSensor_LightSensorKeyword_1(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getLightSensorAccess().getLightSensorAction_0().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// {LightSensor}
protected class LightSensor_LightSensorAction_0 extends ActionToken  {

	public LightSensor_LightSensorAction_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Action getGrammarElement() {
		return grammarAccess.getLightSensorAccess().getLightSensorAction_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(!eObjectConsumer.isConsumed()) return null;
		return eObjectConsumer;
	}
}

// "LightSensor"
protected class LightSensor_LightSensorKeyword_1 extends KeywordToken  {
	
	public LightSensor_LightSensorKeyword_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getLightSensorAccess().getLightSensorKeyword_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new LightSensor_LightSensorAction_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// ("{" "valueState" "=" valueState=EInt "}")?
protected class LightSensor_Group_2 extends GroupToken {
	
	public LightSensor_Group_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getLightSensorAccess().getGroup_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new LightSensor_RightCurlyBracketKeyword_2_4(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// "{"
protected class LightSensor_LeftCurlyBracketKeyword_2_0 extends KeywordToken  {
	
	public LightSensor_LeftCurlyBracketKeyword_2_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getLightSensorAccess().getLeftCurlyBracketKeyword_2_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new LightSensor_LightSensorKeyword_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// "valueState"
protected class LightSensor_ValueStateKeyword_2_1 extends KeywordToken  {
	
	public LightSensor_ValueStateKeyword_2_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getLightSensorAccess().getValueStateKeyword_2_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new LightSensor_LeftCurlyBracketKeyword_2_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// "="
protected class LightSensor_EqualsSignKeyword_2_2 extends KeywordToken  {
	
	public LightSensor_EqualsSignKeyword_2_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getLightSensorAccess().getEqualsSignKeyword_2_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new LightSensor_ValueStateKeyword_2_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// valueState=EInt
protected class LightSensor_ValueStateAssignment_2_3 extends AssignmentToken  {
	
	public LightSensor_ValueStateAssignment_2_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getLightSensorAccess().getValueStateAssignment_2_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new LightSensor_EqualsSignKeyword_2_2(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("valueState",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("valueState");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getLightSensorAccess().getValueStateEIntParserRuleCall_2_3_0(), value, null)) {
			type = AssignmentType.DATATYPE_RULE_CALL;
			element = grammarAccess.getLightSensorAccess().getValueStateEIntParserRuleCall_2_3_0();
			return obj;
		}
		return null;
	}

}

// "}"
protected class LightSensor_RightCurlyBracketKeyword_2_4 extends KeywordToken  {
	
	public LightSensor_RightCurlyBracketKeyword_2_4(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getLightSensorAccess().getRightCurlyBracketKeyword_2_4();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new LightSensor_ValueStateAssignment_2_3(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}



/************ end Rule LightSensor ****************/


/************ begin Rule SmokeSensor ****************
 *
 * SmokeSensor:
 * 	{SmokeSensor} "SmokeSensor" ("{" "valueState" "=" valueState=EInt "}")?;
 *
 **/

// {SmokeSensor} "SmokeSensor" ("{" "valueState" "=" valueState=EInt "}")?
protected class SmokeSensor_Group extends GroupToken {
	
	public SmokeSensor_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getSmokeSensorAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new SmokeSensor_Group_2(lastRuleCallOrigin, this, 0, inst);
			case 1: return new SmokeSensor_SmokeSensorKeyword_1(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getSmokeSensorAccess().getSmokeSensorAction_0().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// {SmokeSensor}
protected class SmokeSensor_SmokeSensorAction_0 extends ActionToken  {

	public SmokeSensor_SmokeSensorAction_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Action getGrammarElement() {
		return grammarAccess.getSmokeSensorAccess().getSmokeSensorAction_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(!eObjectConsumer.isConsumed()) return null;
		return eObjectConsumer;
	}
}

// "SmokeSensor"
protected class SmokeSensor_SmokeSensorKeyword_1 extends KeywordToken  {
	
	public SmokeSensor_SmokeSensorKeyword_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getSmokeSensorAccess().getSmokeSensorKeyword_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new SmokeSensor_SmokeSensorAction_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// ("{" "valueState" "=" valueState=EInt "}")?
protected class SmokeSensor_Group_2 extends GroupToken {
	
	public SmokeSensor_Group_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getSmokeSensorAccess().getGroup_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new SmokeSensor_RightCurlyBracketKeyword_2_4(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// "{"
protected class SmokeSensor_LeftCurlyBracketKeyword_2_0 extends KeywordToken  {
	
	public SmokeSensor_LeftCurlyBracketKeyword_2_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getSmokeSensorAccess().getLeftCurlyBracketKeyword_2_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new SmokeSensor_SmokeSensorKeyword_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// "valueState"
protected class SmokeSensor_ValueStateKeyword_2_1 extends KeywordToken  {
	
	public SmokeSensor_ValueStateKeyword_2_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getSmokeSensorAccess().getValueStateKeyword_2_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new SmokeSensor_LeftCurlyBracketKeyword_2_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// "="
protected class SmokeSensor_EqualsSignKeyword_2_2 extends KeywordToken  {
	
	public SmokeSensor_EqualsSignKeyword_2_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getSmokeSensorAccess().getEqualsSignKeyword_2_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new SmokeSensor_ValueStateKeyword_2_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// valueState=EInt
protected class SmokeSensor_ValueStateAssignment_2_3 extends AssignmentToken  {
	
	public SmokeSensor_ValueStateAssignment_2_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getSmokeSensorAccess().getValueStateAssignment_2_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new SmokeSensor_EqualsSignKeyword_2_2(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("valueState",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("valueState");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getSmokeSensorAccess().getValueStateEIntParserRuleCall_2_3_0(), value, null)) {
			type = AssignmentType.DATATYPE_RULE_CALL;
			element = grammarAccess.getSmokeSensorAccess().getValueStateEIntParserRuleCall_2_3_0();
			return obj;
		}
		return null;
	}

}

// "}"
protected class SmokeSensor_RightCurlyBracketKeyword_2_4 extends KeywordToken  {
	
	public SmokeSensor_RightCurlyBracketKeyword_2_4(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getSmokeSensorAccess().getRightCurlyBracketKeyword_2_4();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new SmokeSensor_ValueStateAssignment_2_3(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}



/************ end Rule SmokeSensor ****************/


/************ begin Rule CO2Sensor ****************
 *
 * CO2Sensor:
 * 	{CO2Sensor} "CO2Sensor" ("{" "valueState" "=" valueState=EInt "}")?;
 *
 **/

// {CO2Sensor} "CO2Sensor" ("{" "valueState" "=" valueState=EInt "}")?
protected class CO2Sensor_Group extends GroupToken {
	
	public CO2Sensor_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getCO2SensorAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new CO2Sensor_Group_2(lastRuleCallOrigin, this, 0, inst);
			case 1: return new CO2Sensor_CO2SensorKeyword_1(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getCO2SensorAccess().getCO2SensorAction_0().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// {CO2Sensor}
protected class CO2Sensor_CO2SensorAction_0 extends ActionToken  {

	public CO2Sensor_CO2SensorAction_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Action getGrammarElement() {
		return grammarAccess.getCO2SensorAccess().getCO2SensorAction_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(!eObjectConsumer.isConsumed()) return null;
		return eObjectConsumer;
	}
}

// "CO2Sensor"
protected class CO2Sensor_CO2SensorKeyword_1 extends KeywordToken  {
	
	public CO2Sensor_CO2SensorKeyword_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getCO2SensorAccess().getCO2SensorKeyword_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new CO2Sensor_CO2SensorAction_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// ("{" "valueState" "=" valueState=EInt "}")?
protected class CO2Sensor_Group_2 extends GroupToken {
	
	public CO2Sensor_Group_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getCO2SensorAccess().getGroup_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new CO2Sensor_RightCurlyBracketKeyword_2_4(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// "{"
protected class CO2Sensor_LeftCurlyBracketKeyword_2_0 extends KeywordToken  {
	
	public CO2Sensor_LeftCurlyBracketKeyword_2_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getCO2SensorAccess().getLeftCurlyBracketKeyword_2_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new CO2Sensor_CO2SensorKeyword_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// "valueState"
protected class CO2Sensor_ValueStateKeyword_2_1 extends KeywordToken  {
	
	public CO2Sensor_ValueStateKeyword_2_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getCO2SensorAccess().getValueStateKeyword_2_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new CO2Sensor_LeftCurlyBracketKeyword_2_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// "="
protected class CO2Sensor_EqualsSignKeyword_2_2 extends KeywordToken  {
	
	public CO2Sensor_EqualsSignKeyword_2_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getCO2SensorAccess().getEqualsSignKeyword_2_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new CO2Sensor_ValueStateKeyword_2_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// valueState=EInt
protected class CO2Sensor_ValueStateAssignment_2_3 extends AssignmentToken  {
	
	public CO2Sensor_ValueStateAssignment_2_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getCO2SensorAccess().getValueStateAssignment_2_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new CO2Sensor_EqualsSignKeyword_2_2(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("valueState",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("valueState");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getCO2SensorAccess().getValueStateEIntParserRuleCall_2_3_0(), value, null)) {
			type = AssignmentType.DATATYPE_RULE_CALL;
			element = grammarAccess.getCO2SensorAccess().getValueStateEIntParserRuleCall_2_3_0();
			return obj;
		}
		return null;
	}

}

// "}"
protected class CO2Sensor_RightCurlyBracketKeyword_2_4 extends KeywordToken  {
	
	public CO2Sensor_RightCurlyBracketKeyword_2_4(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getCO2SensorAccess().getRightCurlyBracketKeyword_2_4();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new CO2Sensor_ValueStateAssignment_2_3(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}



/************ end Rule CO2Sensor ****************/


/************ begin Rule InfraredLightSensor ****************
 *
 * InfraredLightSensor:
 * 	{InfraredLightSensor} "InfraredLightSensor" ("{" "valueState" "=" valueState=EInt "}")?;
 *
 **/

// {InfraredLightSensor} "InfraredLightSensor" ("{" "valueState" "=" valueState=EInt "}")?
protected class InfraredLightSensor_Group extends GroupToken {
	
	public InfraredLightSensor_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getInfraredLightSensorAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new InfraredLightSensor_Group_2(lastRuleCallOrigin, this, 0, inst);
			case 1: return new InfraredLightSensor_InfraredLightSensorKeyword_1(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getInfraredLightSensorAccess().getInfraredLightSensorAction_0().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// {InfraredLightSensor}
protected class InfraredLightSensor_InfraredLightSensorAction_0 extends ActionToken  {

	public InfraredLightSensor_InfraredLightSensorAction_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Action getGrammarElement() {
		return grammarAccess.getInfraredLightSensorAccess().getInfraredLightSensorAction_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(!eObjectConsumer.isConsumed()) return null;
		return eObjectConsumer;
	}
}

// "InfraredLightSensor"
protected class InfraredLightSensor_InfraredLightSensorKeyword_1 extends KeywordToken  {
	
	public InfraredLightSensor_InfraredLightSensorKeyword_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getInfraredLightSensorAccess().getInfraredLightSensorKeyword_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new InfraredLightSensor_InfraredLightSensorAction_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// ("{" "valueState" "=" valueState=EInt "}")?
protected class InfraredLightSensor_Group_2 extends GroupToken {
	
	public InfraredLightSensor_Group_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getInfraredLightSensorAccess().getGroup_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new InfraredLightSensor_RightCurlyBracketKeyword_2_4(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// "{"
protected class InfraredLightSensor_LeftCurlyBracketKeyword_2_0 extends KeywordToken  {
	
	public InfraredLightSensor_LeftCurlyBracketKeyword_2_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getInfraredLightSensorAccess().getLeftCurlyBracketKeyword_2_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new InfraredLightSensor_InfraredLightSensorKeyword_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// "valueState"
protected class InfraredLightSensor_ValueStateKeyword_2_1 extends KeywordToken  {
	
	public InfraredLightSensor_ValueStateKeyword_2_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getInfraredLightSensorAccess().getValueStateKeyword_2_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new InfraredLightSensor_LeftCurlyBracketKeyword_2_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// "="
protected class InfraredLightSensor_EqualsSignKeyword_2_2 extends KeywordToken  {
	
	public InfraredLightSensor_EqualsSignKeyword_2_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getInfraredLightSensorAccess().getEqualsSignKeyword_2_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new InfraredLightSensor_ValueStateKeyword_2_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// valueState=EInt
protected class InfraredLightSensor_ValueStateAssignment_2_3 extends AssignmentToken  {
	
	public InfraredLightSensor_ValueStateAssignment_2_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getInfraredLightSensorAccess().getValueStateAssignment_2_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new InfraredLightSensor_EqualsSignKeyword_2_2(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("valueState",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("valueState");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getInfraredLightSensorAccess().getValueStateEIntParserRuleCall_2_3_0(), value, null)) {
			type = AssignmentType.DATATYPE_RULE_CALL;
			element = grammarAccess.getInfraredLightSensorAccess().getValueStateEIntParserRuleCall_2_3_0();
			return obj;
		}
		return null;
	}

}

// "}"
protected class InfraredLightSensor_RightCurlyBracketKeyword_2_4 extends KeywordToken  {
	
	public InfraredLightSensor_RightCurlyBracketKeyword_2_4(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getInfraredLightSensorAccess().getRightCurlyBracketKeyword_2_4();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new InfraredLightSensor_ValueStateAssignment_2_3(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}



/************ end Rule InfraredLightSensor ****************/


/************ begin Rule HasIntegerValue_Impl ****************
 *
 * HasIntegerValue_Impl returns HasIntegerValue:
 * 	{HasIntegerValue} "HasIntegerValue" ("{" "valueState" "=" valueState=EInt "}")?;
 *
 **/

// {HasIntegerValue} "HasIntegerValue" ("{" "valueState" "=" valueState=EInt "}")?
protected class HasIntegerValue_Impl_Group extends GroupToken {
	
	public HasIntegerValue_Impl_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getHasIntegerValue_ImplAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new HasIntegerValue_Impl_Group_2(lastRuleCallOrigin, this, 0, inst);
			case 1: return new HasIntegerValue_Impl_HasIntegerValueKeyword_1(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getHasIntegerValue_ImplAccess().getHasIntegerValueAction_0().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// {HasIntegerValue}
protected class HasIntegerValue_Impl_HasIntegerValueAction_0 extends ActionToken  {

	public HasIntegerValue_Impl_HasIntegerValueAction_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Action getGrammarElement() {
		return grammarAccess.getHasIntegerValue_ImplAccess().getHasIntegerValueAction_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(!eObjectConsumer.isConsumed()) return null;
		return eObjectConsumer;
	}
}

// "HasIntegerValue"
protected class HasIntegerValue_Impl_HasIntegerValueKeyword_1 extends KeywordToken  {
	
	public HasIntegerValue_Impl_HasIntegerValueKeyword_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getHasIntegerValue_ImplAccess().getHasIntegerValueKeyword_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new HasIntegerValue_Impl_HasIntegerValueAction_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// ("{" "valueState" "=" valueState=EInt "}")?
protected class HasIntegerValue_Impl_Group_2 extends GroupToken {
	
	public HasIntegerValue_Impl_Group_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getHasIntegerValue_ImplAccess().getGroup_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new HasIntegerValue_Impl_RightCurlyBracketKeyword_2_4(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// "{"
protected class HasIntegerValue_Impl_LeftCurlyBracketKeyword_2_0 extends KeywordToken  {
	
	public HasIntegerValue_Impl_LeftCurlyBracketKeyword_2_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getHasIntegerValue_ImplAccess().getLeftCurlyBracketKeyword_2_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new HasIntegerValue_Impl_HasIntegerValueKeyword_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// "valueState"
protected class HasIntegerValue_Impl_ValueStateKeyword_2_1 extends KeywordToken  {
	
	public HasIntegerValue_Impl_ValueStateKeyword_2_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getHasIntegerValue_ImplAccess().getValueStateKeyword_2_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new HasIntegerValue_Impl_LeftCurlyBracketKeyword_2_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// "="
protected class HasIntegerValue_Impl_EqualsSignKeyword_2_2 extends KeywordToken  {
	
	public HasIntegerValue_Impl_EqualsSignKeyword_2_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getHasIntegerValue_ImplAccess().getEqualsSignKeyword_2_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new HasIntegerValue_Impl_ValueStateKeyword_2_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// valueState=EInt
protected class HasIntegerValue_Impl_ValueStateAssignment_2_3 extends AssignmentToken  {
	
	public HasIntegerValue_Impl_ValueStateAssignment_2_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getHasIntegerValue_ImplAccess().getValueStateAssignment_2_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new HasIntegerValue_Impl_EqualsSignKeyword_2_2(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("valueState",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("valueState");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getHasIntegerValue_ImplAccess().getValueStateEIntParserRuleCall_2_3_0(), value, null)) {
			type = AssignmentType.DATATYPE_RULE_CALL;
			element = grammarAccess.getHasIntegerValue_ImplAccess().getValueStateEIntParserRuleCall_2_3_0();
			return obj;
		}
		return null;
	}

}

// "}"
protected class HasIntegerValue_Impl_RightCurlyBracketKeyword_2_4 extends KeywordToken  {
	
	public HasIntegerValue_Impl_RightCurlyBracketKeyword_2_4(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getHasIntegerValue_ImplAccess().getRightCurlyBracketKeyword_2_4();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new HasIntegerValue_Impl_ValueStateAssignment_2_3(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}



/************ end Rule HasIntegerValue_Impl ****************/


/************ begin Rule HumiditySensor ****************
 *
 * HumiditySensor:
 * 	{HumiditySensor} "HumiditySensor" ("{" "valueState" "=" valueState=EInt "}")?;
 *
 **/

// {HumiditySensor} "HumiditySensor" ("{" "valueState" "=" valueState=EInt "}")?
protected class HumiditySensor_Group extends GroupToken {
	
	public HumiditySensor_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getHumiditySensorAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new HumiditySensor_Group_2(lastRuleCallOrigin, this, 0, inst);
			case 1: return new HumiditySensor_HumiditySensorKeyword_1(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getHumiditySensorAccess().getHumiditySensorAction_0().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// {HumiditySensor}
protected class HumiditySensor_HumiditySensorAction_0 extends ActionToken  {

	public HumiditySensor_HumiditySensorAction_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Action getGrammarElement() {
		return grammarAccess.getHumiditySensorAccess().getHumiditySensorAction_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(!eObjectConsumer.isConsumed()) return null;
		return eObjectConsumer;
	}
}

// "HumiditySensor"
protected class HumiditySensor_HumiditySensorKeyword_1 extends KeywordToken  {
	
	public HumiditySensor_HumiditySensorKeyword_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getHumiditySensorAccess().getHumiditySensorKeyword_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new HumiditySensor_HumiditySensorAction_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// ("{" "valueState" "=" valueState=EInt "}")?
protected class HumiditySensor_Group_2 extends GroupToken {
	
	public HumiditySensor_Group_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getHumiditySensorAccess().getGroup_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new HumiditySensor_RightCurlyBracketKeyword_2_4(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// "{"
protected class HumiditySensor_LeftCurlyBracketKeyword_2_0 extends KeywordToken  {
	
	public HumiditySensor_LeftCurlyBracketKeyword_2_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getHumiditySensorAccess().getLeftCurlyBracketKeyword_2_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new HumiditySensor_HumiditySensorKeyword_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// "valueState"
protected class HumiditySensor_ValueStateKeyword_2_1 extends KeywordToken  {
	
	public HumiditySensor_ValueStateKeyword_2_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getHumiditySensorAccess().getValueStateKeyword_2_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new HumiditySensor_LeftCurlyBracketKeyword_2_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// "="
protected class HumiditySensor_EqualsSignKeyword_2_2 extends KeywordToken  {
	
	public HumiditySensor_EqualsSignKeyword_2_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getHumiditySensorAccess().getEqualsSignKeyword_2_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new HumiditySensor_ValueStateKeyword_2_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// valueState=EInt
protected class HumiditySensor_ValueStateAssignment_2_3 extends AssignmentToken  {
	
	public HumiditySensor_ValueStateAssignment_2_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getHumiditySensorAccess().getValueStateAssignment_2_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new HumiditySensor_EqualsSignKeyword_2_2(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("valueState",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("valueState");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getHumiditySensorAccess().getValueStateEIntParserRuleCall_2_3_0(), value, null)) {
			type = AssignmentType.DATATYPE_RULE_CALL;
			element = grammarAccess.getHumiditySensorAccess().getValueStateEIntParserRuleCall_2_3_0();
			return obj;
		}
		return null;
	}

}

// "}"
protected class HumiditySensor_RightCurlyBracketKeyword_2_4 extends KeywordToken  {
	
	public HumiditySensor_RightCurlyBracketKeyword_2_4(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getHumiditySensorAccess().getRightCurlyBracketKeyword_2_4();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new HumiditySensor_ValueStateAssignment_2_3(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}



/************ end Rule HumiditySensor ****************/



/************ begin Rule LightSwitchActuator ****************
 *
 * LightSwitchActuator:
 * 	{LightSwitchActuator} "LightSwitchActuator" ("{" "valueState" "=" valueState=EInt "}")?;
 *
 **/

// {LightSwitchActuator} "LightSwitchActuator" ("{" "valueState" "=" valueState=EInt "}")?
protected class LightSwitchActuator_Group extends GroupToken {
	
	public LightSwitchActuator_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getLightSwitchActuatorAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new LightSwitchActuator_Group_2(lastRuleCallOrigin, this, 0, inst);
			case 1: return new LightSwitchActuator_LightSwitchActuatorKeyword_1(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getLightSwitchActuatorAccess().getLightSwitchActuatorAction_0().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// {LightSwitchActuator}
protected class LightSwitchActuator_LightSwitchActuatorAction_0 extends ActionToken  {

	public LightSwitchActuator_LightSwitchActuatorAction_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Action getGrammarElement() {
		return grammarAccess.getLightSwitchActuatorAccess().getLightSwitchActuatorAction_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(!eObjectConsumer.isConsumed()) return null;
		return eObjectConsumer;
	}
}

// "LightSwitchActuator"
protected class LightSwitchActuator_LightSwitchActuatorKeyword_1 extends KeywordToken  {
	
	public LightSwitchActuator_LightSwitchActuatorKeyword_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getLightSwitchActuatorAccess().getLightSwitchActuatorKeyword_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new LightSwitchActuator_LightSwitchActuatorAction_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// ("{" "valueState" "=" valueState=EInt "}")?
protected class LightSwitchActuator_Group_2 extends GroupToken {
	
	public LightSwitchActuator_Group_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getLightSwitchActuatorAccess().getGroup_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new LightSwitchActuator_RightCurlyBracketKeyword_2_4(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// "{"
protected class LightSwitchActuator_LeftCurlyBracketKeyword_2_0 extends KeywordToken  {
	
	public LightSwitchActuator_LeftCurlyBracketKeyword_2_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getLightSwitchActuatorAccess().getLeftCurlyBracketKeyword_2_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new LightSwitchActuator_LightSwitchActuatorKeyword_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// "valueState"
protected class LightSwitchActuator_ValueStateKeyword_2_1 extends KeywordToken  {
	
	public LightSwitchActuator_ValueStateKeyword_2_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getLightSwitchActuatorAccess().getValueStateKeyword_2_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new LightSwitchActuator_LeftCurlyBracketKeyword_2_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// "="
protected class LightSwitchActuator_EqualsSignKeyword_2_2 extends KeywordToken  {
	
	public LightSwitchActuator_EqualsSignKeyword_2_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getLightSwitchActuatorAccess().getEqualsSignKeyword_2_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new LightSwitchActuator_ValueStateKeyword_2_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// valueState=EInt
protected class LightSwitchActuator_ValueStateAssignment_2_3 extends AssignmentToken  {
	
	public LightSwitchActuator_ValueStateAssignment_2_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getLightSwitchActuatorAccess().getValueStateAssignment_2_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new LightSwitchActuator_EqualsSignKeyword_2_2(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("valueState",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("valueState");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getLightSwitchActuatorAccess().getValueStateEIntParserRuleCall_2_3_0(), value, null)) {
			type = AssignmentType.DATATYPE_RULE_CALL;
			element = grammarAccess.getLightSwitchActuatorAccess().getValueStateEIntParserRuleCall_2_3_0();
			return obj;
		}
		return null;
	}

}

// "}"
protected class LightSwitchActuator_RightCurlyBracketKeyword_2_4 extends KeywordToken  {
	
	public LightSwitchActuator_RightCurlyBracketKeyword_2_4(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getLightSwitchActuatorAccess().getRightCurlyBracketKeyword_2_4();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new LightSwitchActuator_ValueStateAssignment_2_3(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}



/************ end Rule LightSwitchActuator ****************/


/************ begin Rule WindowActuator ****************
 *
 * WindowActuator:
 * 	{WindowActuator} "WindowActuator" ("{" "valueState" "=" valueState=EInt "}")?;
 *
 **/

// {WindowActuator} "WindowActuator" ("{" "valueState" "=" valueState=EInt "}")?
protected class WindowActuator_Group extends GroupToken {
	
	public WindowActuator_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getWindowActuatorAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new WindowActuator_Group_2(lastRuleCallOrigin, this, 0, inst);
			case 1: return new WindowActuator_WindowActuatorKeyword_1(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getWindowActuatorAccess().getWindowActuatorAction_0().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// {WindowActuator}
protected class WindowActuator_WindowActuatorAction_0 extends ActionToken  {

	public WindowActuator_WindowActuatorAction_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Action getGrammarElement() {
		return grammarAccess.getWindowActuatorAccess().getWindowActuatorAction_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(!eObjectConsumer.isConsumed()) return null;
		return eObjectConsumer;
	}
}

// "WindowActuator"
protected class WindowActuator_WindowActuatorKeyword_1 extends KeywordToken  {
	
	public WindowActuator_WindowActuatorKeyword_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getWindowActuatorAccess().getWindowActuatorKeyword_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new WindowActuator_WindowActuatorAction_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// ("{" "valueState" "=" valueState=EInt "}")?
protected class WindowActuator_Group_2 extends GroupToken {
	
	public WindowActuator_Group_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getWindowActuatorAccess().getGroup_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new WindowActuator_RightCurlyBracketKeyword_2_4(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// "{"
protected class WindowActuator_LeftCurlyBracketKeyword_2_0 extends KeywordToken  {
	
	public WindowActuator_LeftCurlyBracketKeyword_2_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getWindowActuatorAccess().getLeftCurlyBracketKeyword_2_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new WindowActuator_WindowActuatorKeyword_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// "valueState"
protected class WindowActuator_ValueStateKeyword_2_1 extends KeywordToken  {
	
	public WindowActuator_ValueStateKeyword_2_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getWindowActuatorAccess().getValueStateKeyword_2_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new WindowActuator_LeftCurlyBracketKeyword_2_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// "="
protected class WindowActuator_EqualsSignKeyword_2_2 extends KeywordToken  {
	
	public WindowActuator_EqualsSignKeyword_2_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getWindowActuatorAccess().getEqualsSignKeyword_2_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new WindowActuator_ValueStateKeyword_2_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// valueState=EInt
protected class WindowActuator_ValueStateAssignment_2_3 extends AssignmentToken  {
	
	public WindowActuator_ValueStateAssignment_2_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getWindowActuatorAccess().getValueStateAssignment_2_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new WindowActuator_EqualsSignKeyword_2_2(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("valueState",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("valueState");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getWindowActuatorAccess().getValueStateEIntParserRuleCall_2_3_0(), value, null)) {
			type = AssignmentType.DATATYPE_RULE_CALL;
			element = grammarAccess.getWindowActuatorAccess().getValueStateEIntParserRuleCall_2_3_0();
			return obj;
		}
		return null;
	}

}

// "}"
protected class WindowActuator_RightCurlyBracketKeyword_2_4 extends KeywordToken  {
	
	public WindowActuator_RightCurlyBracketKeyword_2_4(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getWindowActuatorAccess().getRightCurlyBracketKeyword_2_4();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new WindowActuator_ValueStateAssignment_2_3(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}



/************ end Rule WindowActuator ****************/


/************ begin Rule HumidifierActuator ****************
 *
 * HumidifierActuator:
 * 	{HumidifierActuator} "HumidifierActuator" ("{" "valueState" "=" valueState=EInt "}")?;
 *
 **/

// {HumidifierActuator} "HumidifierActuator" ("{" "valueState" "=" valueState=EInt "}")?
protected class HumidifierActuator_Group extends GroupToken {
	
	public HumidifierActuator_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getHumidifierActuatorAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new HumidifierActuator_Group_2(lastRuleCallOrigin, this, 0, inst);
			case 1: return new HumidifierActuator_HumidifierActuatorKeyword_1(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getHumidifierActuatorAccess().getHumidifierActuatorAction_0().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// {HumidifierActuator}
protected class HumidifierActuator_HumidifierActuatorAction_0 extends ActionToken  {

	public HumidifierActuator_HumidifierActuatorAction_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Action getGrammarElement() {
		return grammarAccess.getHumidifierActuatorAccess().getHumidifierActuatorAction_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(!eObjectConsumer.isConsumed()) return null;
		return eObjectConsumer;
	}
}

// "HumidifierActuator"
protected class HumidifierActuator_HumidifierActuatorKeyword_1 extends KeywordToken  {
	
	public HumidifierActuator_HumidifierActuatorKeyword_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getHumidifierActuatorAccess().getHumidifierActuatorKeyword_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new HumidifierActuator_HumidifierActuatorAction_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// ("{" "valueState" "=" valueState=EInt "}")?
protected class HumidifierActuator_Group_2 extends GroupToken {
	
	public HumidifierActuator_Group_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getHumidifierActuatorAccess().getGroup_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new HumidifierActuator_RightCurlyBracketKeyword_2_4(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// "{"
protected class HumidifierActuator_LeftCurlyBracketKeyword_2_0 extends KeywordToken  {
	
	public HumidifierActuator_LeftCurlyBracketKeyword_2_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getHumidifierActuatorAccess().getLeftCurlyBracketKeyword_2_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new HumidifierActuator_HumidifierActuatorKeyword_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// "valueState"
protected class HumidifierActuator_ValueStateKeyword_2_1 extends KeywordToken  {
	
	public HumidifierActuator_ValueStateKeyword_2_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getHumidifierActuatorAccess().getValueStateKeyword_2_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new HumidifierActuator_LeftCurlyBracketKeyword_2_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// "="
protected class HumidifierActuator_EqualsSignKeyword_2_2 extends KeywordToken  {
	
	public HumidifierActuator_EqualsSignKeyword_2_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getHumidifierActuatorAccess().getEqualsSignKeyword_2_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new HumidifierActuator_ValueStateKeyword_2_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// valueState=EInt
protected class HumidifierActuator_ValueStateAssignment_2_3 extends AssignmentToken  {
	
	public HumidifierActuator_ValueStateAssignment_2_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getHumidifierActuatorAccess().getValueStateAssignment_2_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new HumidifierActuator_EqualsSignKeyword_2_2(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("valueState",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("valueState");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getHumidifierActuatorAccess().getValueStateEIntParserRuleCall_2_3_0(), value, null)) {
			type = AssignmentType.DATATYPE_RULE_CALL;
			element = grammarAccess.getHumidifierActuatorAccess().getValueStateEIntParserRuleCall_2_3_0();
			return obj;
		}
		return null;
	}

}

// "}"
protected class HumidifierActuator_RightCurlyBracketKeyword_2_4 extends KeywordToken  {
	
	public HumidifierActuator_RightCurlyBracketKeyword_2_4(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getHumidifierActuatorAccess().getRightCurlyBracketKeyword_2_4();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new HumidifierActuator_ValueStateAssignment_2_3(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}



/************ end Rule HumidifierActuator ****************/


/************ begin Rule DoorActuator ****************
 *
 * DoorActuator:
 * 	{DoorActuator} "DoorActuator" ("{" "valueState" "=" valueState=EInt "}")?;
 *
 **/

// {DoorActuator} "DoorActuator" ("{" "valueState" "=" valueState=EInt "}")?
protected class DoorActuator_Group extends GroupToken {
	
	public DoorActuator_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getDoorActuatorAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new DoorActuator_Group_2(lastRuleCallOrigin, this, 0, inst);
			case 1: return new DoorActuator_DoorActuatorKeyword_1(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getDoorActuatorAccess().getDoorActuatorAction_0().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// {DoorActuator}
protected class DoorActuator_DoorActuatorAction_0 extends ActionToken  {

	public DoorActuator_DoorActuatorAction_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Action getGrammarElement() {
		return grammarAccess.getDoorActuatorAccess().getDoorActuatorAction_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(!eObjectConsumer.isConsumed()) return null;
		return eObjectConsumer;
	}
}

// "DoorActuator"
protected class DoorActuator_DoorActuatorKeyword_1 extends KeywordToken  {
	
	public DoorActuator_DoorActuatorKeyword_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getDoorActuatorAccess().getDoorActuatorKeyword_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new DoorActuator_DoorActuatorAction_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// ("{" "valueState" "=" valueState=EInt "}")?
protected class DoorActuator_Group_2 extends GroupToken {
	
	public DoorActuator_Group_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getDoorActuatorAccess().getGroup_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new DoorActuator_RightCurlyBracketKeyword_2_4(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// "{"
protected class DoorActuator_LeftCurlyBracketKeyword_2_0 extends KeywordToken  {
	
	public DoorActuator_LeftCurlyBracketKeyword_2_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getDoorActuatorAccess().getLeftCurlyBracketKeyword_2_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new DoorActuator_DoorActuatorKeyword_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// "valueState"
protected class DoorActuator_ValueStateKeyword_2_1 extends KeywordToken  {
	
	public DoorActuator_ValueStateKeyword_2_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getDoorActuatorAccess().getValueStateKeyword_2_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new DoorActuator_LeftCurlyBracketKeyword_2_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// "="
protected class DoorActuator_EqualsSignKeyword_2_2 extends KeywordToken  {
	
	public DoorActuator_EqualsSignKeyword_2_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getDoorActuatorAccess().getEqualsSignKeyword_2_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new DoorActuator_ValueStateKeyword_2_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// valueState=EInt
protected class DoorActuator_ValueStateAssignment_2_3 extends AssignmentToken  {
	
	public DoorActuator_ValueStateAssignment_2_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getDoorActuatorAccess().getValueStateAssignment_2_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new DoorActuator_EqualsSignKeyword_2_2(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("valueState",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("valueState");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getDoorActuatorAccess().getValueStateEIntParserRuleCall_2_3_0(), value, null)) {
			type = AssignmentType.DATATYPE_RULE_CALL;
			element = grammarAccess.getDoorActuatorAccess().getValueStateEIntParserRuleCall_2_3_0();
			return obj;
		}
		return null;
	}

}

// "}"
protected class DoorActuator_RightCurlyBracketKeyword_2_4 extends KeywordToken  {
	
	public DoorActuator_RightCurlyBracketKeyword_2_4(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getDoorActuatorAccess().getRightCurlyBracketKeyword_2_4();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new DoorActuator_ValueStateAssignment_2_3(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}



/************ end Rule DoorActuator ****************/


/************ begin Rule RadiatorActuator ****************
 *
 * RadiatorActuator:
 * 	{RadiatorActuator} "RadiatorActuator" ("{" "valueState" "=" valueState=EInt "}")?;
 *
 **/

// {RadiatorActuator} "RadiatorActuator" ("{" "valueState" "=" valueState=EInt "}")?
protected class RadiatorActuator_Group extends GroupToken {
	
	public RadiatorActuator_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getRadiatorActuatorAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new RadiatorActuator_Group_2(lastRuleCallOrigin, this, 0, inst);
			case 1: return new RadiatorActuator_RadiatorActuatorKeyword_1(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getRadiatorActuatorAccess().getRadiatorActuatorAction_0().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// {RadiatorActuator}
protected class RadiatorActuator_RadiatorActuatorAction_0 extends ActionToken  {

	public RadiatorActuator_RadiatorActuatorAction_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Action getGrammarElement() {
		return grammarAccess.getRadiatorActuatorAccess().getRadiatorActuatorAction_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(!eObjectConsumer.isConsumed()) return null;
		return eObjectConsumer;
	}
}

// "RadiatorActuator"
protected class RadiatorActuator_RadiatorActuatorKeyword_1 extends KeywordToken  {
	
	public RadiatorActuator_RadiatorActuatorKeyword_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getRadiatorActuatorAccess().getRadiatorActuatorKeyword_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new RadiatorActuator_RadiatorActuatorAction_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// ("{" "valueState" "=" valueState=EInt "}")?
protected class RadiatorActuator_Group_2 extends GroupToken {
	
	public RadiatorActuator_Group_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getRadiatorActuatorAccess().getGroup_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new RadiatorActuator_RightCurlyBracketKeyword_2_4(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// "{"
protected class RadiatorActuator_LeftCurlyBracketKeyword_2_0 extends KeywordToken  {
	
	public RadiatorActuator_LeftCurlyBracketKeyword_2_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getRadiatorActuatorAccess().getLeftCurlyBracketKeyword_2_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new RadiatorActuator_RadiatorActuatorKeyword_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// "valueState"
protected class RadiatorActuator_ValueStateKeyword_2_1 extends KeywordToken  {
	
	public RadiatorActuator_ValueStateKeyword_2_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getRadiatorActuatorAccess().getValueStateKeyword_2_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new RadiatorActuator_LeftCurlyBracketKeyword_2_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// "="
protected class RadiatorActuator_EqualsSignKeyword_2_2 extends KeywordToken  {
	
	public RadiatorActuator_EqualsSignKeyword_2_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getRadiatorActuatorAccess().getEqualsSignKeyword_2_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new RadiatorActuator_ValueStateKeyword_2_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// valueState=EInt
protected class RadiatorActuator_ValueStateAssignment_2_3 extends AssignmentToken  {
	
	public RadiatorActuator_ValueStateAssignment_2_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getRadiatorActuatorAccess().getValueStateAssignment_2_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new RadiatorActuator_EqualsSignKeyword_2_2(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("valueState",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("valueState");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getRadiatorActuatorAccess().getValueStateEIntParserRuleCall_2_3_0(), value, null)) {
			type = AssignmentType.DATATYPE_RULE_CALL;
			element = grammarAccess.getRadiatorActuatorAccess().getValueStateEIntParserRuleCall_2_3_0();
			return obj;
		}
		return null;
	}

}

// "}"
protected class RadiatorActuator_RightCurlyBracketKeyword_2_4 extends KeywordToken  {
	
	public RadiatorActuator_RightCurlyBracketKeyword_2_4(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getRadiatorActuatorAccess().getRightCurlyBracketKeyword_2_4();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new RadiatorActuator_ValueStateAssignment_2_3(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}



/************ end Rule RadiatorActuator ****************/


/************ begin Rule AudioAlarmActuator ****************
 *
 * AudioAlarmActuator:
 * 	{AudioAlarmActuator} "AudioAlarmActuator" ("{" "valueState" "=" valueState=EInt "}")?;
 *
 **/

// {AudioAlarmActuator} "AudioAlarmActuator" ("{" "valueState" "=" valueState=EInt "}")?
protected class AudioAlarmActuator_Group extends GroupToken {
	
	public AudioAlarmActuator_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getAudioAlarmActuatorAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new AudioAlarmActuator_Group_2(lastRuleCallOrigin, this, 0, inst);
			case 1: return new AudioAlarmActuator_AudioAlarmActuatorKeyword_1(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getAudioAlarmActuatorAccess().getAudioAlarmActuatorAction_0().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// {AudioAlarmActuator}
protected class AudioAlarmActuator_AudioAlarmActuatorAction_0 extends ActionToken  {

	public AudioAlarmActuator_AudioAlarmActuatorAction_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Action getGrammarElement() {
		return grammarAccess.getAudioAlarmActuatorAccess().getAudioAlarmActuatorAction_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(!eObjectConsumer.isConsumed()) return null;
		return eObjectConsumer;
	}
}

// "AudioAlarmActuator"
protected class AudioAlarmActuator_AudioAlarmActuatorKeyword_1 extends KeywordToken  {
	
	public AudioAlarmActuator_AudioAlarmActuatorKeyword_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getAudioAlarmActuatorAccess().getAudioAlarmActuatorKeyword_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new AudioAlarmActuator_AudioAlarmActuatorAction_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// ("{" "valueState" "=" valueState=EInt "}")?
protected class AudioAlarmActuator_Group_2 extends GroupToken {
	
	public AudioAlarmActuator_Group_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getAudioAlarmActuatorAccess().getGroup_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new AudioAlarmActuator_RightCurlyBracketKeyword_2_4(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// "{"
protected class AudioAlarmActuator_LeftCurlyBracketKeyword_2_0 extends KeywordToken  {
	
	public AudioAlarmActuator_LeftCurlyBracketKeyword_2_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getAudioAlarmActuatorAccess().getLeftCurlyBracketKeyword_2_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new AudioAlarmActuator_AudioAlarmActuatorKeyword_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// "valueState"
protected class AudioAlarmActuator_ValueStateKeyword_2_1 extends KeywordToken  {
	
	public AudioAlarmActuator_ValueStateKeyword_2_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getAudioAlarmActuatorAccess().getValueStateKeyword_2_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new AudioAlarmActuator_LeftCurlyBracketKeyword_2_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// "="
protected class AudioAlarmActuator_EqualsSignKeyword_2_2 extends KeywordToken  {
	
	public AudioAlarmActuator_EqualsSignKeyword_2_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getAudioAlarmActuatorAccess().getEqualsSignKeyword_2_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new AudioAlarmActuator_ValueStateKeyword_2_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// valueState=EInt
protected class AudioAlarmActuator_ValueStateAssignment_2_3 extends AssignmentToken  {
	
	public AudioAlarmActuator_ValueStateAssignment_2_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getAudioAlarmActuatorAccess().getValueStateAssignment_2_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new AudioAlarmActuator_EqualsSignKeyword_2_2(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("valueState",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("valueState");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getAudioAlarmActuatorAccess().getValueStateEIntParserRuleCall_2_3_0(), value, null)) {
			type = AssignmentType.DATATYPE_RULE_CALL;
			element = grammarAccess.getAudioAlarmActuatorAccess().getValueStateEIntParserRuleCall_2_3_0();
			return obj;
		}
		return null;
	}

}

// "}"
protected class AudioAlarmActuator_RightCurlyBracketKeyword_2_4 extends KeywordToken  {
	
	public AudioAlarmActuator_RightCurlyBracketKeyword_2_4(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getAudioAlarmActuatorAccess().getRightCurlyBracketKeyword_2_4();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new AudioAlarmActuator_ValueStateAssignment_2_3(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}



/************ end Rule AudioAlarmActuator ****************/


/************ begin Rule HasIntValue_Impl ****************
 *
 * HasIntValue_Impl returns HasIntValue:
 * 	{HasIntValue} "HasIntValue" ("{" "valueState" "=" valueState=EInt "}")?;
 *
 **/

// {HasIntValue} "HasIntValue" ("{" "valueState" "=" valueState=EInt "}")?
protected class HasIntValue_Impl_Group extends GroupToken {
	
	public HasIntValue_Impl_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getHasIntValue_ImplAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new HasIntValue_Impl_Group_2(lastRuleCallOrigin, this, 0, inst);
			case 1: return new HasIntValue_Impl_HasIntValueKeyword_1(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getHasIntValue_ImplAccess().getHasIntValueAction_0().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// {HasIntValue}
protected class HasIntValue_Impl_HasIntValueAction_0 extends ActionToken  {

	public HasIntValue_Impl_HasIntValueAction_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Action getGrammarElement() {
		return grammarAccess.getHasIntValue_ImplAccess().getHasIntValueAction_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(!eObjectConsumer.isConsumed()) return null;
		return eObjectConsumer;
	}
}

// "HasIntValue"
protected class HasIntValue_Impl_HasIntValueKeyword_1 extends KeywordToken  {
	
	public HasIntValue_Impl_HasIntValueKeyword_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getHasIntValue_ImplAccess().getHasIntValueKeyword_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new HasIntValue_Impl_HasIntValueAction_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// ("{" "valueState" "=" valueState=EInt "}")?
protected class HasIntValue_Impl_Group_2 extends GroupToken {
	
	public HasIntValue_Impl_Group_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getHasIntValue_ImplAccess().getGroup_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new HasIntValue_Impl_RightCurlyBracketKeyword_2_4(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// "{"
protected class HasIntValue_Impl_LeftCurlyBracketKeyword_2_0 extends KeywordToken  {
	
	public HasIntValue_Impl_LeftCurlyBracketKeyword_2_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getHasIntValue_ImplAccess().getLeftCurlyBracketKeyword_2_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new HasIntValue_Impl_HasIntValueKeyword_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// "valueState"
protected class HasIntValue_Impl_ValueStateKeyword_2_1 extends KeywordToken  {
	
	public HasIntValue_Impl_ValueStateKeyword_2_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getHasIntValue_ImplAccess().getValueStateKeyword_2_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new HasIntValue_Impl_LeftCurlyBracketKeyword_2_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// "="
protected class HasIntValue_Impl_EqualsSignKeyword_2_2 extends KeywordToken  {
	
	public HasIntValue_Impl_EqualsSignKeyword_2_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getHasIntValue_ImplAccess().getEqualsSignKeyword_2_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new HasIntValue_Impl_ValueStateKeyword_2_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// valueState=EInt
protected class HasIntValue_Impl_ValueStateAssignment_2_3 extends AssignmentToken  {
	
	public HasIntValue_Impl_ValueStateAssignment_2_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getHasIntValue_ImplAccess().getValueStateAssignment_2_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new HasIntValue_Impl_EqualsSignKeyword_2_2(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("valueState",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("valueState");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getHasIntValue_ImplAccess().getValueStateEIntParserRuleCall_2_3_0(), value, null)) {
			type = AssignmentType.DATATYPE_RULE_CALL;
			element = grammarAccess.getHasIntValue_ImplAccess().getValueStateEIntParserRuleCall_2_3_0();
			return obj;
		}
		return null;
	}

}

// "}"
protected class HasIntValue_Impl_RightCurlyBracketKeyword_2_4 extends KeywordToken  {
	
	public HasIntValue_Impl_RightCurlyBracketKeyword_2_4(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getHasIntValue_ImplAccess().getRightCurlyBracketKeyword_2_4();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new HasIntValue_Impl_ValueStateAssignment_2_3(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}



/************ end Rule HasIntValue_Impl ****************/

}
